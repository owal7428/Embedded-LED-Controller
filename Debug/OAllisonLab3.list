
OAllisonLab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000898  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a44  08000a44  00010a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a50  08000a50  00010a58  2**0
                  CONTENTS
  4 .ARM          00000000  08000a50  08000a50  00010a58  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a50  08000a58  00010a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a50  08000a50  00010a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a54  08000a54  00010a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a58  2**0
                  CONTENTS
 10 .bss          00000048  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000048  20000048  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010a58  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010a82  2**0
                  CONTENTS, READONLY
 14 .debug_info   000012ac  00000000  00000000  00010ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000006e4  00000000  00000000  00011d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000200  00000000  00000000  00012458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000015b  00000000  00000000  00012658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000015bf  00000000  00000000  000127b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002205  00000000  00000000  00013d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00004a41  00000000  00000000  00015f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000005ac  00000000  00000000  0001a9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0001af64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000a2c 	.word	0x08000a2c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000a2c 	.word	0x08000a2c

080001ec <ApplicationInit>:
#include "ApplicationCode.h"

uint8_t currentLED;

// I'm using the green LED here
void ApplicationInit() {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
    InitGreenLED();
 80001f0:	f000 f812 	bl	8000218 <InitGreenLED>
    InitRedLED();
 80001f4:	f000 f817 	bl	8000226 <InitRedLED>

    currentLED = GREEN_LED;
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <ApplicationInit+0x28>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	701a      	strb	r2, [r3, #0]

    DisableGreenLED();
 80001fe:	f000 f827 	bl	8000250 <DisableGreenLED>
    DisableRedLED();
 8000202:	f000 f82c 	bl	800025e <DisableRedLED>

    addSchedulerEvent(DELAY_EVENT);
 8000206:	2001      	movs	r0, #1
 8000208:	f000 fb98 	bl	800093c <addSchedulerEvent>

    #if BUTTON_INTERRUPT_ENABLE == 0
    InitButton();
    addSchedulerEvent(BUTTON_POLL);
    #else
    InitButtonInterruptMode();
 800020c:	f000 f82e 	bl	800026c <InitButtonInterruptMode>
    #endif
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	2000001c 	.word	0x2000001c

08000218 <InitGreenLED>:

void InitGreenLED() {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
    LED_Init(GREEN_LED);
 800021c:	2000      	movs	r0, #0
 800021e:	f000 fad7 	bl	80007d0 <LED_Init>
}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}

08000226 <InitRedLED>:

void InitRedLED() {
 8000226:	b580      	push	{r7, lr}
 8000228:	af00      	add	r7, sp, #0
    LED_Init(RED_LED);
 800022a:	2001      	movs	r0, #1
 800022c:	f000 fad0 	bl	80007d0 <LED_Init>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}

08000234 <ToggleGreenLED>:
void InitRedGreenLEDs() {
    InitGreenLED();
    InitRedLED();
}

void ToggleGreenLED() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
    LED_Toggle(GREEN_LED);
 8000238:	2000      	movs	r0, #0
 800023a:	f000 fb53 	bl	80008e4 <LED_Toggle>
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}

08000242 <ToggleRedLED>:

void ToggleRedLED() {
 8000242:	b580      	push	{r7, lr}
 8000244:	af00      	add	r7, sp, #0
    LED_Toggle(RED_LED);
 8000246:	2001      	movs	r0, #1
 8000248:	f000 fb4c 	bl	80008e4 <LED_Toggle>
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}

08000250 <DisableGreenLED>:
}
void EnableRedLED() {
    LED_Enable(RED_LED);
}

void DisableGreenLED() {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
    LED_Disable(GREEN_LED);
 8000254:	2000      	movs	r0, #0
 8000256:	f000 fb21 	bl	800089c <LED_Disable>
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}

0800025e <DisableRedLED>:

void DisableRedLED() {
 800025e:	b580      	push	{r7, lr}
 8000260:	af00      	add	r7, sp, #0
    LED_Disable(RED_LED);
 8000262:	2001      	movs	r0, #1
 8000264:	f000 fb1a 	bl	800089c <LED_Disable>
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}

0800026c <InitButtonInterruptMode>:
                DisableRedLED();  
            break;
    }
}
#else
void InitButtonInterruptMode() {
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
    Button_InitInterruptMode();
 8000270:	f000 f850 	bl	8000314 <Button_InitInterruptMode>
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}

08000278 <Delay>:
#endif

void Delay(uint32_t delay) {
 8000278:	b480      	push	{r7}
 800027a:	b08b      	sub	sp, #44	; 0x2c
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
    char name[] = "OwenAllison";
 8000280:	4a14      	ldr	r2, [pc, #80]	; (80002d4 <Delay+0x5c>)
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	ca07      	ldmia	r2, {r0, r1, r2}
 8000288:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    [[maybe_unused]] char temp[NAME_LENGTH];

    for (int i = 0; i < MAGNIFY; i++) {
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	; 0x24
 8000290:	e016      	b.n	80002c0 <Delay+0x48>
        for (int i = 0; i < NAME_LENGTH; i++) {
 8000292:	2300      	movs	r3, #0
 8000294:	623b      	str	r3, [r7, #32]
 8000296:	e00d      	b.n	80002b4 <Delay+0x3c>
            temp[i] = name[i];
 8000298:	f107 0214 	add.w	r2, r7, #20
 800029c:	6a3b      	ldr	r3, [r7, #32]
 800029e:	4413      	add	r3, r2
 80002a0:	7819      	ldrb	r1, [r3, #0]
 80002a2:	f107 0208 	add.w	r2, r7, #8
 80002a6:	6a3b      	ldr	r3, [r7, #32]
 80002a8:	4413      	add	r3, r2
 80002aa:	460a      	mov	r2, r1
 80002ac:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < NAME_LENGTH; i++) {
 80002ae:	6a3b      	ldr	r3, [r7, #32]
 80002b0:	3301      	adds	r3, #1
 80002b2:	623b      	str	r3, [r7, #32]
 80002b4:	6a3b      	ldr	r3, [r7, #32]
 80002b6:	2b0a      	cmp	r3, #10
 80002b8:	ddee      	ble.n	8000298 <Delay+0x20>
    for (int i = 0; i < MAGNIFY; i++) {
 80002ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002bc:	3301      	adds	r3, #1
 80002be:	627b      	str	r3, [r7, #36]	; 0x24
 80002c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002c2:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <Delay+0x60>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	dde4      	ble.n	8000292 <Delay+0x1a>
        }
    }
}
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	372c      	adds	r7, #44	; 0x2c
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	08000a44 	.word	0x08000a44
 80002d8:	0003d08f 	.word	0x0003d08f

080002dc <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
    InterruptIRQ_disable(EXTI0_IRQ_NUMBER);
 80002e0:	2006      	movs	r0, #6
 80002e2:	f000 fa45 	bl	8000770 <InterruptIRQ_disable>

    if (currentLED == GREEN_LED)
 80002e6:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <EXTI0_IRQHandler+0x34>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d102      	bne.n	80002f4 <EXTI0_IRQHandler+0x18>
        ToggleGreenLED();
 80002ee:	f7ff ffa1 	bl	8000234 <ToggleGreenLED>
 80002f2:	e005      	b.n	8000300 <EXTI0_IRQHandler+0x24>
    else if (currentLED == RED_LED)
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <EXTI0_IRQHandler+0x34>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d101      	bne.n	8000300 <EXTI0_IRQHandler+0x24>
        ToggleRedLED();
 80002fc:	f7ff ffa1 	bl	8000242 <ToggleRedLED>
    
    EXTI_clear_pending(BUTTON_PIN_NUM);
 8000300:	2000      	movs	r0, #0
 8000302:	f000 fa4f 	bl	80007a4 <EXTI_clear_pending>

    InterruptIRQ_enable(EXTI0_IRQ_NUMBER);
 8000306:	2006      	movs	r0, #6
 8000308:	f000 fa18 	bl	800073c <InterruptIRQ_enable>
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	2000001c 	.word	0x2000001c

08000314 <Button_InitInterruptMode>:
    button.GPIO_PinConfig.PinPuPdControl = PUPD_CONTROL_NONE;
    Button_EnableClock();
    GPIO_Init(&button);
}

void Button_InitInterruptMode() {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    button.pGPIOx = BUTTON_PORT;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <Button_InitInterruptMode+0x44>)
 800031a:	4a10      	ldr	r2, [pc, #64]	; (800035c <Button_InitInterruptMode+0x48>)
 800031c:	601a      	str	r2, [r3, #0]
    button.GPIO_PinConfig.PinNumber = BUTTON_PIN_NUM;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <Button_InitInterruptMode+0x44>)
 8000320:	2200      	movs	r2, #0
 8000322:	711a      	strb	r2, [r3, #4]
    button.GPIO_PinConfig.PinMode = PIN_MODE_CONFIG_GPIN;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <Button_InitInterruptMode+0x44>)
 8000326:	2200      	movs	r2, #0
 8000328:	715a      	strb	r2, [r3, #5]
    button.GPIO_PinConfig.PinSpeed = OSPEED_MED;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <Button_InitInterruptMode+0x44>)
 800032c:	2201      	movs	r2, #1
 800032e:	71da      	strb	r2, [r3, #7]
    button.GPIO_PinConfig.OPType = OPTYPE_PUSH_PULL;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <Button_InitInterruptMode+0x44>)
 8000332:	2200      	movs	r2, #0
 8000334:	719a      	strb	r2, [r3, #6]
    button.GPIO_PinConfig.PinPuPdControl = PUPD_CONTROL_NONE;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <Button_InitInterruptMode+0x44>)
 8000338:	2200      	movs	r2, #0
 800033a:	721a      	strb	r2, [r3, #8]
    button.GPIO_PinConfig.PinInterruptMode = FALLING_AND_RISING_INTERRUPT;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <Button_InitInterruptMode+0x44>)
 800033e:	2203      	movs	r2, #3
 8000340:	729a      	strb	r2, [r3, #10]
    Button_EnableClock();
 8000342:	f000 f80d 	bl	8000360 <Button_EnableClock>
    GPIO_Init(&button);
 8000346:	4804      	ldr	r0, [pc, #16]	; (8000358 <Button_InitInterruptMode+0x44>)
 8000348:	f000 f816 	bl	8000378 <GPIO_Init>
    GPIO_EnableOrDisableInterrupt(EXTI0_IRQ_NUMBER, ENABLE);
 800034c:	2101      	movs	r1, #1
 800034e:	2006      	movs	r0, #6
 8000350:	f000 f9d8 	bl	8000704 <GPIO_EnableOrDisableInterrupt>
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000020 	.word	0x20000020
 800035c:	40020000 	.word	0x40020000

08000360 <Button_EnableClock>:

void Button_EnableClock() {
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
    GPIO_ClockEnableOrDisable(button.pGPIOx, ENABLE);
 8000364:	4b03      	ldr	r3, [pc, #12]	; (8000374 <Button_EnableClock+0x14>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2101      	movs	r1, #1
 800036a:	4618      	mov	r0, r3
 800036c:	f000 f940 	bl	80005f0 <GPIO_ClockEnableOrDisable>
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000020 	.word	0x20000020

08000378 <GPIO_Init>:
 *      Author: owenallison
 */

#include "GPIO_Driver.h"

void GPIO_Init(GPIO_Handle_t* handle) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b088      	sub	sp, #32
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]

	uint8_t pin_num = handle -> GPIO_PinConfig.PinNumber;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	791b      	ldrb	r3, [r3, #4]
 8000384:	77fb      	strb	r3, [r7, #31]
	
	// Configure the port mode register
	uint32_t temp = handle -> GPIO_PinConfig.PinMode << (pin_num * 2);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	795b      	ldrb	r3, [r3, #5]
 800038a:	461a      	mov	r2, r3
 800038c:	7ffb      	ldrb	r3, [r7, #31]
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	fa02 f303 	lsl.w	r3, r2, r3
 8000394:	61bb      	str	r3, [r7, #24]
	handle -> pGPIOx -> MODER &= ~(0x3 << (2 * pin_num));
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	7ffb      	ldrb	r3, [r7, #31]
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	2103      	movs	r1, #3
 80003a2:	fa01 f303 	lsl.w	r3, r1, r3
 80003a6:	43db      	mvns	r3, r3
 80003a8:	4619      	mov	r1, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	400a      	ands	r2, r1
 80003b0:	601a      	str	r2, [r3, #0]
	handle -> pGPIOx -> MODER |= temp;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	6819      	ldr	r1, [r3, #0]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	69ba      	ldr	r2, [r7, #24]
 80003be:	430a      	orrs	r2, r1
 80003c0:	601a      	str	r2, [r3, #0]

	uint8_t interruptMode = handle -> GPIO_PinConfig.PinInterruptMode;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	7a9b      	ldrb	r3, [r3, #10]
 80003c6:	75fb      	strb	r3, [r7, #23]

	if (interruptMode != NO_INTERRUPT_SELECTED) {
 80003c8:	7dfb      	ldrb	r3, [r7, #23]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d077      	beq.n	80004be <GPIO_Init+0x146>
		if (interruptMode == FALLING_EDGE_INTERRUPT) {
 80003ce:	7dfb      	ldrb	r3, [r7, #23]
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d115      	bne.n	8000400 <GPIO_Init+0x88>
			EXTI -> FTSR |= (1 << pin_num);
 80003d4:	4b83      	ldr	r3, [pc, #524]	; (80005e4 <GPIO_Init+0x26c>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	7ffa      	ldrb	r2, [r7, #31]
 80003da:	2101      	movs	r1, #1
 80003dc:	fa01 f202 	lsl.w	r2, r1, r2
 80003e0:	4611      	mov	r1, r2
 80003e2:	4a80      	ldr	r2, [pc, #512]	; (80005e4 <GPIO_Init+0x26c>)
 80003e4:	430b      	orrs	r3, r1
 80003e6:	60d3      	str	r3, [r2, #12]
			EXTI -> RTSR &= ~(1 << pin_num);
 80003e8:	4b7e      	ldr	r3, [pc, #504]	; (80005e4 <GPIO_Init+0x26c>)
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	7ffa      	ldrb	r2, [r7, #31]
 80003ee:	2101      	movs	r1, #1
 80003f0:	fa01 f202 	lsl.w	r2, r1, r2
 80003f4:	43d2      	mvns	r2, r2
 80003f6:	4611      	mov	r1, r2
 80003f8:	4a7a      	ldr	r2, [pc, #488]	; (80005e4 <GPIO_Init+0x26c>)
 80003fa:	400b      	ands	r3, r1
 80003fc:	6093      	str	r3, [r2, #8]
 80003fe:	e02f      	b.n	8000460 <GPIO_Init+0xe8>
		}
		else if (interruptMode == RISING_EDGE_INTERRUPT) {
 8000400:	7dfb      	ldrb	r3, [r7, #23]
 8000402:	2b02      	cmp	r3, #2
 8000404:	d115      	bne.n	8000432 <GPIO_Init+0xba>
			EXTI -> FTSR &= ~(1 << pin_num);
 8000406:	4b77      	ldr	r3, [pc, #476]	; (80005e4 <GPIO_Init+0x26c>)
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	7ffa      	ldrb	r2, [r7, #31]
 800040c:	2101      	movs	r1, #1
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	43d2      	mvns	r2, r2
 8000414:	4611      	mov	r1, r2
 8000416:	4a73      	ldr	r2, [pc, #460]	; (80005e4 <GPIO_Init+0x26c>)
 8000418:	400b      	ands	r3, r1
 800041a:	60d3      	str	r3, [r2, #12]
			EXTI -> RTSR |= (1 << pin_num);
 800041c:	4b71      	ldr	r3, [pc, #452]	; (80005e4 <GPIO_Init+0x26c>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	7ffa      	ldrb	r2, [r7, #31]
 8000422:	2101      	movs	r1, #1
 8000424:	fa01 f202 	lsl.w	r2, r1, r2
 8000428:	4611      	mov	r1, r2
 800042a:	4a6e      	ldr	r2, [pc, #440]	; (80005e4 <GPIO_Init+0x26c>)
 800042c:	430b      	orrs	r3, r1
 800042e:	6093      	str	r3, [r2, #8]
 8000430:	e016      	b.n	8000460 <GPIO_Init+0xe8>
		}
		else if (interruptMode == FALLING_AND_RISING_INTERRUPT) {
 8000432:	7dfb      	ldrb	r3, [r7, #23]
 8000434:	2b03      	cmp	r3, #3
 8000436:	d113      	bne.n	8000460 <GPIO_Init+0xe8>
			EXTI -> FTSR |= (1 << pin_num);
 8000438:	4b6a      	ldr	r3, [pc, #424]	; (80005e4 <GPIO_Init+0x26c>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	7ffa      	ldrb	r2, [r7, #31]
 800043e:	2101      	movs	r1, #1
 8000440:	fa01 f202 	lsl.w	r2, r1, r2
 8000444:	4611      	mov	r1, r2
 8000446:	4a67      	ldr	r2, [pc, #412]	; (80005e4 <GPIO_Init+0x26c>)
 8000448:	430b      	orrs	r3, r1
 800044a:	60d3      	str	r3, [r2, #12]
			EXTI -> RTSR |= (1 << pin_num);
 800044c:	4b65      	ldr	r3, [pc, #404]	; (80005e4 <GPIO_Init+0x26c>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	7ffa      	ldrb	r2, [r7, #31]
 8000452:	2101      	movs	r1, #1
 8000454:	fa01 f202 	lsl.w	r2, r1, r2
 8000458:	4611      	mov	r1, r2
 800045a:	4a62      	ldr	r2, [pc, #392]	; (80005e4 <GPIO_Init+0x26c>)
 800045c:	430b      	orrs	r3, r1
 800045e:	6093      	str	r3, [r2, #8]
		}

		uint8_t regSelect = pin_num/4;
 8000460:	7ffb      	ldrb	r3, [r7, #31]
 8000462:	089b      	lsrs	r3, r3, #2
 8000464:	75bb      	strb	r3, [r7, #22]
		uint8_t pin_loc = pin_num % 4;
 8000466:	7ffb      	ldrb	r3, [r7, #31]
 8000468:	f003 0303 	and.w	r3, r3, #3
 800046c:	757b      	strb	r3, [r7, #21]
		uint16_t portCode = GPIO_ReturnPortCode(handle ->pGPIOx);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4618      	mov	r0, r3
 8000474:	f000 f934 	bl	80006e0 <GPIO_ReturnPortCode>
 8000478:	4603      	mov	r3, r0
 800047a:	827b      	strh	r3, [r7, #18]
		
		SYSCFG_CLOCK_ENABLE;
 800047c:	4b5a      	ldr	r3, [pc, #360]	; (80005e8 <GPIO_Init+0x270>)
 800047e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000480:	4a59      	ldr	r2, [pc, #356]	; (80005e8 <GPIO_Init+0x270>)
 8000482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000486:	6453      	str	r3, [r2, #68]	; 0x44

		SYSCFG -> EXTICR[regSelect] |= (portCode << (pin_loc * 4));
 8000488:	4a58      	ldr	r2, [pc, #352]	; (80005ec <GPIO_Init+0x274>)
 800048a:	7dbb      	ldrb	r3, [r7, #22]
 800048c:	3302      	adds	r3, #2
 800048e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000492:	8a79      	ldrh	r1, [r7, #18]
 8000494:	7d7b      	ldrb	r3, [r7, #21]
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	fa01 f303 	lsl.w	r3, r1, r3
 800049c:	4618      	mov	r0, r3
 800049e:	4953      	ldr	r1, [pc, #332]	; (80005ec <GPIO_Init+0x274>)
 80004a0:	7dbb      	ldrb	r3, [r7, #22]
 80004a2:	4302      	orrs	r2, r0
 80004a4:	3302      	adds	r3, #2
 80004a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI -> IMR |= (1 << pin_num);
 80004aa:	4b4e      	ldr	r3, [pc, #312]	; (80005e4 <GPIO_Init+0x26c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	7ffa      	ldrb	r2, [r7, #31]
 80004b0:	2101      	movs	r1, #1
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a4a      	ldr	r2, [pc, #296]	; (80005e4 <GPIO_Init+0x26c>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	6013      	str	r3, [r2, #0]
	}

	// Configure the output speed register
	temp = handle -> GPIO_PinConfig.PinSpeed << (pin_num * 2);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	79db      	ldrb	r3, [r3, #7]
 80004c2:	461a      	mov	r2, r3
 80004c4:	7ffb      	ldrb	r3, [r7, #31]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	61bb      	str	r3, [r7, #24]
	handle -> pGPIOx -> OSPEEDR &= ~(0x3 << (2 * pin_num));
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	689a      	ldr	r2, [r3, #8]
 80004d4:	7ffb      	ldrb	r3, [r7, #31]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	2103      	movs	r1, #3
 80004da:	fa01 f303 	lsl.w	r3, r1, r3
 80004de:	43db      	mvns	r3, r3
 80004e0:	4619      	mov	r1, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	400a      	ands	r2, r1
 80004e8:	609a      	str	r2, [r3, #8]
	handle -> pGPIOx -> OSPEEDR |= temp;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	6899      	ldr	r1, [r3, #8]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	69ba      	ldr	r2, [r7, #24]
 80004f6:	430a      	orrs	r2, r1
 80004f8:	609a      	str	r2, [r3, #8]

	// Configure the pull-up/pull-down register
	temp = handle -> GPIO_PinConfig.PinPuPdControl << (pin_num * 2);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	7a1b      	ldrb	r3, [r3, #8]
 80004fe:	461a      	mov	r2, r3
 8000500:	7ffb      	ldrb	r3, [r7, #31]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	61bb      	str	r3, [r7, #24]
	handle -> pGPIOx -> PUPDR &= ~(0x3 << (2 * pin_num));
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	68da      	ldr	r2, [r3, #12]
 8000510:	7ffb      	ldrb	r3, [r7, #31]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	2103      	movs	r1, #3
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	43db      	mvns	r3, r3
 800051c:	4619      	mov	r1, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	400a      	ands	r2, r1
 8000524:	60da      	str	r2, [r3, #12]
	handle -> pGPIOx -> PUPDR |= temp;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	68d9      	ldr	r1, [r3, #12]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	69ba      	ldr	r2, [r7, #24]
 8000532:	430a      	orrs	r2, r1
 8000534:	60da      	str	r2, [r3, #12]

	// Configure the output type register
	temp = handle -> GPIO_PinConfig.OPType << (pin_num);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	799b      	ldrb	r3, [r3, #6]
 800053a:	461a      	mov	r2, r3
 800053c:	7ffb      	ldrb	r3, [r7, #31]
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
 8000542:	61bb      	str	r3, [r7, #24]
	handle -> pGPIOx -> OTYPER &= ~(0x1 << (pin_num));
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	685a      	ldr	r2, [r3, #4]
 800054a:	7ffb      	ldrb	r3, [r7, #31]
 800054c:	2101      	movs	r1, #1
 800054e:	fa01 f303 	lsl.w	r3, r1, r3
 8000552:	43db      	mvns	r3, r3
 8000554:	4619      	mov	r1, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	400a      	ands	r2, r1
 800055c:	605a      	str	r2, [r3, #4]
	handle -> pGPIOx -> OTYPER |= temp;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	6859      	ldr	r1, [r3, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	69ba      	ldr	r2, [r7, #24]
 800056a:	430a      	orrs	r2, r1
 800056c:	605a      	str	r2, [r3, #4]

	/* Check if pin mode is set to alt fun
	If yes, then configure */
	if (handle -> GPIO_PinConfig.PinMode == PIN_MODE_CONFIG_ALTFUN) {
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	795b      	ldrb	r3, [r3, #5]
 8000572:	2b02      	cmp	r3, #2
 8000574:	d131      	bne.n	80005da <GPIO_Init+0x262>
		uint32_t altfun_reg = pin_num / 8;
 8000576:	7ffb      	ldrb	r3, [r7, #31]
 8000578:	08db      	lsrs	r3, r3, #3
 800057a:	b2db      	uxtb	r3, r3
 800057c:	60fb      	str	r3, [r7, #12]
		uint32_t pin_loc = pin_num % 8;
 800057e:	7ffb      	ldrb	r3, [r7, #31]
 8000580:	f003 0307 	and.w	r3, r3, #7
 8000584:	60bb      	str	r3, [r7, #8]

		temp = handle -> GPIO_PinConfig.PinAltFunMode << (pin_loc * 4);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	7a5b      	ldrb	r3, [r3, #9]
 800058a:	461a      	mov	r2, r3
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	fa02 f303 	lsl.w	r3, r2, r3
 8000594:	61bb      	str	r3, [r7, #24]
		handle -> pGPIOx -> AFR[altfun_reg] &= ~(0x7 << (pin_loc * 4));
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	3208      	adds	r2, #8
 800059e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	2107      	movs	r1, #7
 80005a8:	fa01 f303 	lsl.w	r3, r1, r3
 80005ac:	43db      	mvns	r3, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4011      	ands	r1, r2
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	3208      	adds	r2, #8
 80005ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		handle -> pGPIOx -> AFR[altfun_reg] |= temp;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	3208      	adds	r2, #8
 80005c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	69ba      	ldr	r2, [r7, #24]
 80005d0:	4311      	orrs	r1, r2
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	3208      	adds	r2, #8
 80005d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80005da:	bf00      	nop
 80005dc:	3720      	adds	r7, #32
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40013c00 	.word	0x40013c00
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40013800 	.word	0x40013800

080005f0 <GPIO_ClockEnableOrDisable>:
void GPIO_ClockEnableOrDisable(GPIO_RegDef_t* reg, uint8_t enableOrDisable) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
	
	if (reg == GPIOA) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <GPIO_ClockEnableOrDisable+0x74>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d113      	bne.n	800062c <GPIO_ClockEnableOrDisable+0x3c>
		if (enableOrDisable == ENABLE)
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d106      	bne.n	8000618 <GPIO_ClockEnableOrDisable+0x28>
			GPIOx_CLOCK_ENABLE(GPIOA_OFFSET);
 800060a:	4b17      	ldr	r3, [pc, #92]	; (8000668 <GPIO_ClockEnableOrDisable+0x78>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a16      	ldr	r2, [pc, #88]	; (8000668 <GPIO_ClockEnableOrDisable+0x78>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOx_CLOCK_ENABLE(GPIOG_OFFSET);

		else if (enableOrDisable == DISABLE)
			GPIOx_CLOCK_DISABLE(GPIOG_OFFSET);
	}
}
 8000616:	e020      	b.n	800065a <GPIO_ClockEnableOrDisable+0x6a>
		else if (enableOrDisable == DISABLE)
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d11d      	bne.n	800065a <GPIO_ClockEnableOrDisable+0x6a>
			GPIOx_CLOCK_DISABLE(GPIOA_OFFSET);
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <GPIO_ClockEnableOrDisable+0x78>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a11      	ldr	r2, [pc, #68]	; (8000668 <GPIO_ClockEnableOrDisable+0x78>)
 8000624:	f023 0301 	bic.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062a:	e016      	b.n	800065a <GPIO_ClockEnableOrDisable+0x6a>
	else if (reg == GPIOG) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a0f      	ldr	r2, [pc, #60]	; (800066c <GPIO_ClockEnableOrDisable+0x7c>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d112      	bne.n	800065a <GPIO_ClockEnableOrDisable+0x6a>
		if (enableOrDisable == ENABLE)
 8000634:	78fb      	ldrb	r3, [r7, #3]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d106      	bne.n	8000648 <GPIO_ClockEnableOrDisable+0x58>
			GPIOx_CLOCK_ENABLE(GPIOG_OFFSET);
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <GPIO_ClockEnableOrDisable+0x78>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <GPIO_ClockEnableOrDisable+0x78>)
 8000640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000646:	e008      	b.n	800065a <GPIO_ClockEnableOrDisable+0x6a>
		else if (enableOrDisable == DISABLE)
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d105      	bne.n	800065a <GPIO_ClockEnableOrDisable+0x6a>
			GPIOx_CLOCK_DISABLE(GPIOG_OFFSET);
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <GPIO_ClockEnableOrDisable+0x78>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a05      	ldr	r2, [pc, #20]	; (8000668 <GPIO_ClockEnableOrDisable+0x78>)
 8000654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	40020000 	.word	0x40020000
 8000668:	40023800 	.word	0x40023800
 800066c:	40021800 	.word	0x40021800

08000670 <GPIO_Toggle>:
void GPIO_Toggle(GPIO_RegDef_t* reg, uint8_t pin_num) {
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
	
	reg -> ODR ^= 1 << pin_num;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	78fa      	ldrb	r2, [r7, #3]
 8000682:	2101      	movs	r1, #1
 8000684:	fa01 f202 	lsl.w	r2, r1, r2
 8000688:	405a      	eors	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	615a      	str	r2, [r3, #20]
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <GPIO_Write>:

void GPIO_Write(GPIO_RegDef_t* reg, uint8_t pin_num, uint8_t val) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
 80006a4:	4613      	mov	r3, r2
 80006a6:	70bb      	strb	r3, [r7, #2]
	
	if (val == 1) {
 80006a8:	78bb      	ldrb	r3, [r7, #2]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d109      	bne.n	80006c2 <GPIO_Write+0x2a>
		reg -> ODR |= 1 << pin_num;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	78fa      	ldrb	r2, [r7, #3]
 80006b4:	2101      	movs	r1, #1
 80006b6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ba:	431a      	orrs	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	615a      	str	r2, [r3, #20]
	} 
	else {
		reg -> ODR &= ~(1 << pin_num);
	}
}
 80006c0:	e009      	b.n	80006d6 <GPIO_Write+0x3e>
		reg -> ODR &= ~(1 << pin_num);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	78fa      	ldrb	r2, [r7, #3]
 80006c8:	2101      	movs	r1, #1
 80006ca:	fa01 f202 	lsl.w	r2, r1, r2
 80006ce:	43d2      	mvns	r2, r2
 80006d0:	401a      	ands	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	615a      	str	r2, [r3, #20]
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <GPIO_ReturnPortCode>:

uint8_t GPIO_ReadFromPin(GPIO_RegDef_t* reg, uint8_t pin_num) {
	return (uint8_t) ((reg -> IDR >> pin_num) & 0x01);
}

uint16_t GPIO_ReturnPortCode(GPIO_RegDef_t* reg) {
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	if (reg == GPIOA)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a05      	ldr	r2, [pc, #20]	; (8000700 <GPIO_ReturnPortCode+0x20>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d101      	bne.n	80006f4 <GPIO_ReturnPortCode+0x14>
		return 0x0000;
 80006f0:	2300      	movs	r3, #0
 80006f2:	e000      	b.n	80006f6 <GPIO_ReturnPortCode+0x16>
	else
		return 0;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	40020000 	.word	0x40020000

08000704 <GPIO_EnableOrDisableInterrupt>:

void GPIO_EnableOrDisableInterrupt(uint8_t IRQ, uint8_t enableOrDisable) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	460a      	mov	r2, r1
 800070e:	71fb      	strb	r3, [r7, #7]
 8000710:	4613      	mov	r3, r2
 8000712:	71bb      	strb	r3, [r7, #6]
	if (enableOrDisable == ENABLE) {
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d104      	bne.n	8000724 <GPIO_EnableOrDisableInterrupt+0x20>
		InterruptIRQ_enable(IRQ);
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f80d 	bl	800073c <InterruptIRQ_enable>
	}
	else if (enableOrDisable == DISABLE) {
		InterruptIRQ_disable(IRQ);
	}
}
 8000722:	e006      	b.n	8000732 <GPIO_EnableOrDisableInterrupt+0x2e>
	else if (enableOrDisable == DISABLE) {
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d103      	bne.n	8000732 <GPIO_EnableOrDisableInterrupt+0x2e>
		InterruptIRQ_disable(IRQ);
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f81f 	bl	8000770 <InterruptIRQ_disable>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <InterruptIRQ_enable>:
#include "InterruptControl.h"

void InterruptIRQ_enable(uint8_t IRQ)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
    uint8_t shift = IRQ % 32;
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f003 031f 	and.w	r3, r3, #31
 800074c:	73fb      	strb	r3, [r7, #15]
    *NVIC_SET_ENABLE |= (1 << shift);
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <InterruptIRQ_enable+0x30>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	7bfa      	ldrb	r2, [r7, #15]
 8000754:	2101      	movs	r1, #1
 8000756:	fa01 f202 	lsl.w	r2, r1, r2
 800075a:	4611      	mov	r1, r2
 800075c:	4a03      	ldr	r2, [pc, #12]	; (800076c <InterruptIRQ_enable+0x30>)
 800075e:	430b      	orrs	r3, r1
 8000760:	6013      	str	r3, [r2, #0]
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	e000e100 	.word	0xe000e100

08000770 <InterruptIRQ_disable>:

void InterruptIRQ_disable(uint8_t IRQ)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
    uint8_t shift = IRQ % 32;
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	f003 031f 	and.w	r3, r3, #31
 8000780:	73fb      	strb	r3, [r7, #15]
    *NVIC_CLEAR_ENABLE |= (1 << shift);
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <InterruptIRQ_disable+0x30>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	7bfa      	ldrb	r2, [r7, #15]
 8000788:	2101      	movs	r1, #1
 800078a:	fa01 f202 	lsl.w	r2, r1, r2
 800078e:	4611      	mov	r1, r2
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <InterruptIRQ_disable+0x30>)
 8000792:	430b      	orrs	r3, r1
 8000794:	6013      	str	r3, [r2, #0]
}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	e000e180 	.word	0xe000e180

080007a4 <EXTI_clear_pending>:
    uint8_t shift = IRQ % 32;
	*NVIC_SET_PENDING |= (1 << shift);
}

void EXTI_clear_pending(uint8_t pin_num)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
    EXTI -> PR |= (1 << pin_num);
 80007ae:	4b07      	ldr	r3, [pc, #28]	; (80007cc <EXTI_clear_pending+0x28>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	79fa      	ldrb	r2, [r7, #7]
 80007b4:	2101      	movs	r1, #1
 80007b6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a03      	ldr	r2, [pc, #12]	; (80007cc <EXTI_clear_pending+0x28>)
 80007be:	430b      	orrs	r3, r1
 80007c0:	6153      	str	r3, [r2, #20]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	40013c00 	.word	0x40013c00

080007d0 <LED_Init>:
#include "LED_Driver.h"

static GPIO_Handle_t red;
static GPIO_Handle_t green;

void LED_Init(uint8_t led) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d01b      	beq.n	8000818 <LED_Init+0x48>
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d131      	bne.n	8000848 <LED_Init+0x78>
        case RED_LED:
            red.pGPIOx = GPIOG;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <LED_Init+0x80>)
 80007e6:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <LED_Init+0x84>)
 80007e8:	601a      	str	r2, [r3, #0]
            red.GPIO_PinConfig.PinNumber = RED_LED_PORT;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <LED_Init+0x80>)
 80007ec:	220e      	movs	r2, #14
 80007ee:	711a      	strb	r2, [r3, #4]
            red.GPIO_PinConfig.PinMode = PIN_MODE_CONFIG_GPOUT;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <LED_Init+0x80>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	715a      	strb	r2, [r3, #5]
            red.GPIO_PinConfig.PinSpeed = OSPEED_MED;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <LED_Init+0x80>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	71da      	strb	r2, [r3, #7]
            red.GPIO_PinConfig.OPType = OPTYPE_PUSH_PULL;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <LED_Init+0x80>)
 80007fe:	2200      	movs	r2, #0
 8000800:	719a      	strb	r2, [r3, #6]
            red.GPIO_PinConfig.PinPuPdControl = PUPD_CONTROL_NONE;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <LED_Init+0x80>)
 8000804:	2200      	movs	r2, #0
 8000806:	721a      	strb	r2, [r3, #8]
            LED_EnableClock(RED_LED);
 8000808:	2001      	movs	r0, #1
 800080a:	f000 f827 	bl	800085c <LED_EnableClock>
            GPIO_Init(&red);
 800080e:	4810      	ldr	r0, [pc, #64]	; (8000850 <LED_Init+0x80>)
 8000810:	f7ff fdb2 	bl	8000378 <GPIO_Init>
            break;
 8000814:	bf00      	nop
            green.GPIO_PinConfig.OPType = OPTYPE_PUSH_PULL;
            green.GPIO_PinConfig.PinPuPdControl = PUPD_CONTROL_NONE;
            LED_EnableClock(GREEN_LED);
            GPIO_Init(&green);
    }
}
 8000816:	e017      	b.n	8000848 <LED_Init+0x78>
            green.pGPIOx = GPIOG;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <LED_Init+0x88>)
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <LED_Init+0x84>)
 800081c:	601a      	str	r2, [r3, #0]
            green.GPIO_PinConfig.PinNumber = GREEN_LED_PORT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <LED_Init+0x88>)
 8000820:	220d      	movs	r2, #13
 8000822:	711a      	strb	r2, [r3, #4]
            green.GPIO_PinConfig.PinMode = PIN_MODE_CONFIG_GPOUT;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <LED_Init+0x88>)
 8000826:	2201      	movs	r2, #1
 8000828:	715a      	strb	r2, [r3, #5]
            green.GPIO_PinConfig.PinSpeed = OSPEED_MED;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <LED_Init+0x88>)
 800082c:	2201      	movs	r2, #1
 800082e:	71da      	strb	r2, [r3, #7]
            green.GPIO_PinConfig.OPType = OPTYPE_PUSH_PULL;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <LED_Init+0x88>)
 8000832:	2200      	movs	r2, #0
 8000834:	719a      	strb	r2, [r3, #6]
            green.GPIO_PinConfig.PinPuPdControl = PUPD_CONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <LED_Init+0x88>)
 8000838:	2200      	movs	r2, #0
 800083a:	721a      	strb	r2, [r3, #8]
            LED_EnableClock(GREEN_LED);
 800083c:	2000      	movs	r0, #0
 800083e:	f000 f80d 	bl	800085c <LED_EnableClock>
            GPIO_Init(&green);
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <LED_Init+0x88>)
 8000844:	f7ff fd98 	bl	8000378 <GPIO_Init>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000002c 	.word	0x2000002c
 8000854:	40021800 	.word	0x40021800
 8000858:	20000038 	.word	0x20000038

0800085c <LED_EnableClock>:
void LED_EnableClock(uint8_t led) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d009      	beq.n	8000880 <LED_EnableClock+0x24>
 800086c:	2b01      	cmp	r3, #1
 800086e:	d10d      	bne.n	800088c <LED_EnableClock+0x30>
        case RED_LED:
            GPIO_ClockEnableOrDisable(red.pGPIOx, ENABLE);
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <LED_EnableClock+0x38>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2101      	movs	r1, #1
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff feba 	bl	80005f0 <GPIO_ClockEnableOrDisable>
            break;
 800087c:	bf00      	nop
        case GREEN_LED:
            GPIO_ClockEnableOrDisable(green.pGPIOx, ENABLE);
    }
}
 800087e:	e005      	b.n	800088c <LED_EnableClock+0x30>
            GPIO_ClockEnableOrDisable(green.pGPIOx, ENABLE);
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <LED_EnableClock+0x3c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2101      	movs	r1, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff feb2 	bl	80005f0 <GPIO_ClockEnableOrDisable>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000002c 	.word	0x2000002c
 8000898:	20000038 	.word	0x20000038

0800089c <LED_Disable>:
        case GREEN_LED:
            GPIO_Write(GPIOG, green.GPIO_PinConfig.PinNumber, ENABLE);
    }
}

void LED_Disable(uint8_t led) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00a      	beq.n	80008c2 <LED_Disable+0x26>
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d10f      	bne.n	80008d0 <LED_Disable+0x34>
        case RED_LED:
            GPIO_Write(GPIOG, red.GPIO_PinConfig.PinNumber, DISABLE);
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <LED_Disable+0x3c>)
 80008b2:	791b      	ldrb	r3, [r3, #4]
 80008b4:	2200      	movs	r2, #0
 80008b6:	4619      	mov	r1, r3
 80008b8:	4808      	ldr	r0, [pc, #32]	; (80008dc <LED_Disable+0x40>)
 80008ba:	f7ff feed 	bl	8000698 <GPIO_Write>
            break;
 80008be:	bf00      	nop
        case GREEN_LED:
            GPIO_Write(GPIOG, green.GPIO_PinConfig.PinNumber, DISABLE);
    }
}
 80008c0:	e006      	b.n	80008d0 <LED_Disable+0x34>
            GPIO_Write(GPIOG, green.GPIO_PinConfig.PinNumber, DISABLE);
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <LED_Disable+0x44>)
 80008c4:	791b      	ldrb	r3, [r3, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <LED_Disable+0x40>)
 80008cc:	f7ff fee4 	bl	8000698 <GPIO_Write>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000002c 	.word	0x2000002c
 80008dc:	40021800 	.word	0x40021800
 80008e0:	20000038 	.word	0x20000038

080008e4 <LED_Toggle>:

void LED_Toggle(uint8_t led) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d009      	beq.n	8000908 <LED_Toggle+0x24>
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d10d      	bne.n	8000914 <LED_Toggle+0x30>
        case RED_LED:
            GPIO_Toggle(GPIOG, red.GPIO_PinConfig.PinNumber);
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <LED_Toggle+0x38>)
 80008fa:	791b      	ldrb	r3, [r3, #4]
 80008fc:	4619      	mov	r1, r3
 80008fe:	4808      	ldr	r0, [pc, #32]	; (8000920 <LED_Toggle+0x3c>)
 8000900:	f7ff feb6 	bl	8000670 <GPIO_Toggle>
            break;
 8000904:	bf00      	nop
        case GREEN_LED:
            GPIO_Toggle(GPIOG, green.GPIO_PinConfig.PinNumber);
    }
}
 8000906:	e005      	b.n	8000914 <LED_Toggle+0x30>
            GPIO_Toggle(GPIOG, green.GPIO_PinConfig.PinNumber);
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <LED_Toggle+0x40>)
 800090a:	791b      	ldrb	r3, [r3, #4]
 800090c:	4619      	mov	r1, r3
 800090e:	4804      	ldr	r0, [pc, #16]	; (8000920 <LED_Toggle+0x3c>)
 8000910:	f7ff feae 	bl	8000670 <GPIO_Toggle>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000002c 	.word	0x2000002c
 8000920:	40021800 	.word	0x40021800
 8000924:	20000038 	.word	0x20000038

08000928 <getScheduledEvents>:

#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents() {
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
    return scheduledEvents;
 800092c:	4b02      	ldr	r3, [pc, #8]	; (8000938 <getScheduledEvents+0x10>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000044 	.word	0x20000044

0800093c <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    scheduledEvents |= 1 << event;
 8000944:	2201      	movs	r2, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	461a      	mov	r2, r3
 800094e:	4b05      	ldr	r3, [pc, #20]	; (8000964 <addSchedulerEvent+0x28>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4313      	orrs	r3, r2
 8000954:	4a03      	ldr	r2, [pc, #12]	; (8000964 <addSchedulerEvent+0x28>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000044 	.word	0x20000044

08000968 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	uint32_t eventsToRun;

    ApplicationInit();
 800096e:	f7ff fc3d 	bl	80001ec <ApplicationInit>

    addSchedulerEvent(DELAY_EVENT);
 8000972:	2001      	movs	r0, #1
 8000974:	f7ff ffe2 	bl	800093c <addSchedulerEvent>

    eventsToRun = getScheduledEvents();
 8000978:	f7ff ffd6 	bl	8000928 <getScheduledEvents>
 800097c:	6078      	str	r0, [r7, #4]
      #if BUTTON_INTERRUPT_ENABLE == 0
      if ((eventsToRun & AccessPollEvent) != 0)
        ButtonPollingRoutine();
      #endif

      if ((eventsToRun & accessDelayEvent) != 0)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f003 0302 	and.w	r3, r3, #2
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0fa      	beq.n	800097e <main+0x16>
    	  Delay(0);
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fc75 	bl	8000278 <Delay>
      if ((eventsToRun & accessDelayEvent) != 0)
 800098e:	e7f6      	b.n	800097e <main+0x16>

08000990 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000992:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000994:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000998:	480c      	ldr	r0, [pc, #48]	; (80009cc <LoopForever+0x6>)
  ldr r1, =_edata
 800099a:	490d      	ldr	r1, [pc, #52]	; (80009d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800099c:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <LoopForever+0xe>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a0:	e002      	b.n	80009a8 <LoopCopyDataInit>

080009a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a6:	3304      	adds	r3, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ac:	d3f9      	bcc.n	80009a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b0:	4c0a      	ldr	r4, [pc, #40]	; (80009dc <LoopForever+0x16>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b4:	e001      	b.n	80009ba <LoopFillZerobss>

080009b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b8:	3204      	adds	r2, #4

080009ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009bc:	d3fb      	bcc.n	80009b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009be:	f000 f811 	bl	80009e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c2:	f7ff ffd1 	bl	8000968 <main>

080009c6 <LoopForever>:

LoopForever:
  b LoopForever
 80009c6:	e7fe      	b.n	80009c6 <LoopForever>
  ldr   r0, =_estack
 80009c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009d4:	08000a58 	.word	0x08000a58
  ldr r2, =_sbss
 80009d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009dc:	20000048 	.word	0x20000048

080009e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC_IRQHandler>
	...

080009e4 <__libc_init_array>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	4d0d      	ldr	r5, [pc, #52]	; (8000a1c <__libc_init_array+0x38>)
 80009e8:	4c0d      	ldr	r4, [pc, #52]	; (8000a20 <__libc_init_array+0x3c>)
 80009ea:	1b64      	subs	r4, r4, r5
 80009ec:	10a4      	asrs	r4, r4, #2
 80009ee:	2600      	movs	r6, #0
 80009f0:	42a6      	cmp	r6, r4
 80009f2:	d109      	bne.n	8000a08 <__libc_init_array+0x24>
 80009f4:	4d0b      	ldr	r5, [pc, #44]	; (8000a24 <__libc_init_array+0x40>)
 80009f6:	4c0c      	ldr	r4, [pc, #48]	; (8000a28 <__libc_init_array+0x44>)
 80009f8:	f000 f818 	bl	8000a2c <_init>
 80009fc:	1b64      	subs	r4, r4, r5
 80009fe:	10a4      	asrs	r4, r4, #2
 8000a00:	2600      	movs	r6, #0
 8000a02:	42a6      	cmp	r6, r4
 8000a04:	d105      	bne.n	8000a12 <__libc_init_array+0x2e>
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a0c:	4798      	blx	r3
 8000a0e:	3601      	adds	r6, #1
 8000a10:	e7ee      	b.n	80009f0 <__libc_init_array+0xc>
 8000a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a16:	4798      	blx	r3
 8000a18:	3601      	adds	r6, #1
 8000a1a:	e7f2      	b.n	8000a02 <__libc_init_array+0x1e>
 8000a1c:	08000a50 	.word	0x08000a50
 8000a20:	08000a50 	.word	0x08000a50
 8000a24:	08000a50 	.word	0x08000a50
 8000a28:	08000a54 	.word	0x08000a54

08000a2c <_init>:
 8000a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a2e:	bf00      	nop
 8000a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a32:	bc08      	pop	{r3}
 8000a34:	469e      	mov	lr, r3
 8000a36:	4770      	bx	lr

08000a38 <_fini>:
 8000a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a3a:	bf00      	nop
 8000a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a3e:	bc08      	pop	{r3}
 8000a40:	469e      	mov	lr, r3
 8000a42:	4770      	bx	lr
