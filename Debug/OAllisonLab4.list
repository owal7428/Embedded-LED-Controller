
OAllisonLab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fdc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08001188  08001188  00011188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001194  08001194  0001119c  2**0
                  CONTENTS
  4 .ARM          00000000  08001194  08001194  0001119c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001194  0800119c  0001119c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001194  08001194  00011194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001198  08001198  00011198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001119c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001119c  2**0
                  CONTENTS
 10 .bss          0000007c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000007c  2000007c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001119c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000111c6  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001fcd  00000000  00000000  00011209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000008bf  00000000  00000000  000131d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002d8  00000000  00000000  00013a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001fd  00000000  00000000  00013d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000018b9  00000000  00000000  00013f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002bd0  00000000  00000000  00015826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000053ae  00000000  00000000  000183f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000008d8  00000000  00000000  0001d7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0001e07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001170 	.word	0x08001170

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08001170 	.word	0x08001170

080001ec <ApplicationInit>:

static int redStatus;
static int greenStatus;

// I'm using the green LED here
void ApplicationInit() {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
    InitGreenLED();
 80001f0:	f000 f820 	bl	8000234 <InitGreenLED>
    InitRedLED();
 80001f4:	f000 f825 	bl	8000242 <InitRedLED>

    DisableGreenLED();
 80001f8:	f000 f838 	bl	800026c <DisableGreenLED>
    DisableRedLED();
 80001fc:	f000 f83d 	bl	800027a <DisableRedLED>

    redStatus = LED_OFF;
 8000200:	4b0a      	ldr	r3, [pc, #40]	; (800022c <ApplicationInit+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
    greenStatus = LED_OFF;
 8000206:	4b0a      	ldr	r3, [pc, #40]	; (8000230 <ApplicationInit+0x44>)
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]

    #if BUTTON_INTERRUPT_ENABLE == 0
    InitButton();
    addSchedulerEvent(BUTTON_POLL);
    #else
    InitButtonInterruptMode();
 800020c:	f000 f83c 	bl	8000288 <InitButtonInterruptMode>
    #endif
    
    LED_Timer2_Init();
 8000210:	f000 fc7e 	bl	8000b10 <LED_Timer2_Init>
    LED_Timer5_Init();
 8000214:	f000 fcd2 	bl	8000bbc <LED_Timer5_Init>

    LED_Timer2_Start();
 8000218:	f000 fcc0 	bl	8000b9c <LED_Timer2_Start>
    LED_Timer5_Start();
 800021c:	f000 fd14 	bl	8000c48 <LED_Timer5_Start>

    addSchedulerEvent(DELAY_EVENT);
 8000220:	2001      	movs	r0, #1
 8000222:	f000 fd2f 	bl	8000c84 <addSchedulerEvent>

}
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	2000001c 	.word	0x2000001c
 8000230:	20000020 	.word	0x20000020

08000234 <InitGreenLED>:

void InitGreenLED() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
    LED_Init(GREEN_LED);
 8000238:	2000      	movs	r0, #0
 800023a:	f000 fbbd 	bl	80009b8 <LED_Init>
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}

08000242 <InitRedLED>:

void InitRedLED() {
 8000242:	b580      	push	{r7, lr}
 8000244:	af00      	add	r7, sp, #0
    LED_Init(RED_LED);
 8000246:	2001      	movs	r0, #1
 8000248:	f000 fbb6 	bl	80009b8 <LED_Init>
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}

08000250 <ToggleGreenLED>:
void InitRedGreenLEDs() {
    InitGreenLED();
    InitRedLED();
}

void ToggleGreenLED() {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
    LED_Toggle(GREEN_LED);
 8000254:	2000      	movs	r0, #0
 8000256:	f000 fc39 	bl	8000acc <LED_Toggle>
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}

0800025e <ToggleRedLED>:

void ToggleRedLED() {
 800025e:	b580      	push	{r7, lr}
 8000260:	af00      	add	r7, sp, #0
    LED_Toggle(RED_LED);
 8000262:	2001      	movs	r0, #1
 8000264:	f000 fc32 	bl	8000acc <LED_Toggle>
}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}

0800026c <DisableGreenLED>:
}
void EnableRedLED() {
    LED_Enable(RED_LED);
}

void DisableGreenLED() {
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
    LED_Disable(GREEN_LED);
 8000270:	2000      	movs	r0, #0
 8000272:	f000 fc07 	bl	8000a84 <LED_Disable>
}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}

0800027a <DisableRedLED>:

void DisableRedLED() {
 800027a:	b580      	push	{r7, lr}
 800027c:	af00      	add	r7, sp, #0
    LED_Disable(RED_LED);
 800027e:	2001      	movs	r0, #1
 8000280:	f000 fc00 	bl	8000a84 <LED_Disable>
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <InitButtonInterruptMode>:
                DisableRedLED();  
            break;
    }
}
#else
void InitButtonInterruptMode() {
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
    Button_InitInterruptMode();
 800028c:	f000 f8c8 	bl	8000420 <Button_InitInterruptMode>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}

08000294 <Delay>:
#endif

void Delay(uint32_t delay) {
 8000294:	b480      	push	{r7}
 8000296:	b08b      	sub	sp, #44	; 0x2c
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
    char name[] = "OwenAllison";
 800029c:	4a14      	ldr	r2, [pc, #80]	; (80002f0 <Delay+0x5c>)
 800029e:	f107 0314 	add.w	r3, r7, #20
 80002a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    [[maybe_unused]] char temp[NAME_LENGTH];

    for (int i = 0; i < MAGNIFY; i++) {
 80002a8:	2300      	movs	r3, #0
 80002aa:	627b      	str	r3, [r7, #36]	; 0x24
 80002ac:	e016      	b.n	80002dc <Delay+0x48>
        for (int i = 0; i < NAME_LENGTH; i++) {
 80002ae:	2300      	movs	r3, #0
 80002b0:	623b      	str	r3, [r7, #32]
 80002b2:	e00d      	b.n	80002d0 <Delay+0x3c>
            temp[i] = name[i];
 80002b4:	f107 0214 	add.w	r2, r7, #20
 80002b8:	6a3b      	ldr	r3, [r7, #32]
 80002ba:	4413      	add	r3, r2
 80002bc:	7819      	ldrb	r1, [r3, #0]
 80002be:	f107 0208 	add.w	r2, r7, #8
 80002c2:	6a3b      	ldr	r3, [r7, #32]
 80002c4:	4413      	add	r3, r2
 80002c6:	460a      	mov	r2, r1
 80002c8:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < NAME_LENGTH; i++) {
 80002ca:	6a3b      	ldr	r3, [r7, #32]
 80002cc:	3301      	adds	r3, #1
 80002ce:	623b      	str	r3, [r7, #32]
 80002d0:	6a3b      	ldr	r3, [r7, #32]
 80002d2:	2b0a      	cmp	r3, #10
 80002d4:	ddee      	ble.n	80002b4 <Delay+0x20>
    for (int i = 0; i < MAGNIFY; i++) {
 80002d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002d8:	3301      	adds	r3, #1
 80002da:	627b      	str	r3, [r7, #36]	; 0x24
 80002dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002de:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <Delay+0x60>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	dde4      	ble.n	80002ae <Delay+0x1a>
        }
    }
}
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	372c      	adds	r7, #44	; 0x2c
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	08001188 	.word	0x08001188
 80002f4:	0003d08f 	.word	0x0003d08f

080002f8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
    InterruptIRQ_Disable(EXTI0_IRQ_NUMBER);
 80002fc:	2006      	movs	r0, #6
 80002fe:	f000 fadd 	bl	80008bc <InterruptIRQ_Disable>

    // Re-enable TIM2's interrupt
    *NVIC_SET_ENABLE |= (0x1 << TIM2_IRQ_NUMBER);
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <EXTI0_IRQHandler+0x30>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a08      	ldr	r2, [pc, #32]	; (8000328 <EXTI0_IRQHandler+0x30>)
 8000308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800030c:	6013      	str	r3, [r2, #0]
    DisableRedLED();
    redStatus = LED_OFF;
    greenStatus = LED_OFF;
    #else
    // Reset LEDs
    LED_Timer2_Reset();
 800030e:	f000 fc4d 	bl	8000bac <LED_Timer2_Reset>
    LED_Timer5_Reset();
 8000312:	f000 fca3 	bl	8000c5c <LED_Timer5_Reset>
    #endif

    EXTI_Clear_Pending(BUTTON_PIN_NUM);
 8000316:	2000      	movs	r0, #0
 8000318:	f000 fb38 	bl	800098c <EXTI_Clear_Pending>

    InterruptIRQ_Enable(EXTI0_IRQ_NUMBER);
 800031c:	2006      	movs	r0, #6
 800031e:	f000 fa92 	bl	8000846 <InterruptIRQ_Enable>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	e000e100 	.word	0xe000e100

0800032c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
    InterruptIRQ_Disable(TIM2_IRQ_NUMBER);
 8000332:	201c      	movs	r0, #28
 8000334:	f000 fac2 	bl	80008bc <InterruptIRQ_Disable>

    // Re-enable EXTI0's interrupt
    *NVIC_SET_ENABLE |= (0x1 << EXTI0_IRQ_NUMBER);
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <TIM2_IRQHandler+0x7c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a1a      	ldr	r2, [pc, #104]	; (80003a8 <TIM2_IRQHandler+0x7c>)
 800033e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000342:	6013      	str	r3, [r2, #0]

    uint32_t flags = TIM2 -> SR;
 8000344:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000348:	691b      	ldr	r3, [r3, #16]
 800034a:	607b      	str	r3, [r7, #4]
    bool countedFlag = flags & (0x1 << 1);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f003 0302 	and.w	r3, r3, #2
 8000352:	2b00      	cmp	r3, #0
 8000354:	bf14      	ite	ne
 8000356:	2301      	movne	r3, #1
 8000358:	2300      	moveq	r3, #0
 800035a:	70fb      	strb	r3, [r7, #3]

    // If bit 1 of SR register is set
    if (countedFlag)
 800035c:	78fb      	ldrb	r3, [r7, #3]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d00f      	beq.n	8000382 <TIM2_IRQHandler+0x56>
        	DisableRedLED();
        	redStatus = LED_OFF;
            LED_Timer2_Priority_Reset();
        }
        #else
        ToggleRedLED();
 8000362:	f7ff ff7c 	bl	800025e <ToggleRedLED>
        redStatus += 1; redStatus %= 2;
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <TIM2_IRQHandler+0x80>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3301      	adds	r3, #1
 800036c:	4a0f      	ldr	r2, [pc, #60]	; (80003ac <TIM2_IRQHandler+0x80>)
 800036e:	6013      	str	r3, [r2, #0]
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <TIM2_IRQHandler+0x80>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	bfb8      	it	lt
 800037c:	425b      	neglt	r3, r3
 800037e:	4a0b      	ldr	r2, [pc, #44]	; (80003ac <TIM2_IRQHandler+0x80>)
 8000380:	6013      	str	r3, [r2, #0]
        #endif
    }

    TIM2 -> SR &= ~(0x1 << 1);
 8000382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000386:	691b      	ldr	r3, [r3, #16]
 8000388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038c:	f023 0302 	bic.w	r3, r3, #2
 8000390:	6113      	str	r3, [r2, #16]

    InterruptIRQ_Clear_Pending(TIM2_IRQ_NUMBER);
 8000392:	201c      	movs	r0, #28
 8000394:	f000 fac6 	bl	8000924 <InterruptIRQ_Clear_Pending>

    InterruptIRQ_Enable(TIM2_IRQ_NUMBER);
 8000398:	201c      	movs	r0, #28
 800039a:	f000 fa54 	bl	8000846 <InterruptIRQ_Enable>
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	e000e100 	.word	0xe000e100
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
    InterruptIRQ_Disable(TIM5_IRQ_NUMBER);
 80003b6:	2032      	movs	r0, #50	; 0x32
 80003b8:	f000 fa80 	bl	80008bc <InterruptIRQ_Disable>

    uint32_t flags = TIM5 -> SR;
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <TIM5_IRQHandler+0x68>)
 80003be:	691b      	ldr	r3, [r3, #16]
 80003c0:	607b      	str	r3, [r7, #4]
    bool countedFlag = flags & (0x1 << 1);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	f003 0302 	and.w	r3, r3, #2
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	bf14      	ite	ne
 80003cc:	2301      	movne	r3, #1
 80003ce:	2300      	moveq	r3, #0
 80003d0:	70fb      	strb	r3, [r7, #3]

    // If bit 1 of SR register is set
    if (countedFlag)
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d00f      	beq.n	80003f8 <TIM5_IRQHandler+0x48>
        	DisableGreenLED();
        	greenStatus = LED_OFF;
            LED_Timer5_Priority_Reset();
        }
        #else
        ToggleGreenLED();
 80003d8:	f7ff ff3a 	bl	8000250 <ToggleGreenLED>
        greenStatus += 1; greenStatus %= 2;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <TIM5_IRQHandler+0x6c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	3301      	adds	r3, #1
 80003e2:	4a0e      	ldr	r2, [pc, #56]	; (800041c <TIM5_IRQHandler+0x6c>)
 80003e4:	6013      	str	r3, [r2, #0]
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <TIM5_IRQHandler+0x6c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	bfb8      	it	lt
 80003f2:	425b      	neglt	r3, r3
 80003f4:	4a09      	ldr	r2, [pc, #36]	; (800041c <TIM5_IRQHandler+0x6c>)
 80003f6:	6013      	str	r3, [r2, #0]
        #endif
    }

    TIM5 -> SR &= ~(0x1 << 1);
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <TIM5_IRQHandler+0x68>)
 80003fa:	691b      	ldr	r3, [r3, #16]
 80003fc:	4a06      	ldr	r2, [pc, #24]	; (8000418 <TIM5_IRQHandler+0x68>)
 80003fe:	f023 0302 	bic.w	r3, r3, #2
 8000402:	6113      	str	r3, [r2, #16]

    InterruptIRQ_Clear_Pending(TIM5_IRQ_NUMBER);
 8000404:	2032      	movs	r0, #50	; 0x32
 8000406:	f000 fa8d 	bl	8000924 <InterruptIRQ_Clear_Pending>

    InterruptIRQ_Enable(TIM5_IRQ_NUMBER);
 800040a:	2032      	movs	r0, #50	; 0x32
 800040c:	f000 fa1b 	bl	8000846 <InterruptIRQ_Enable>
}
 8000410:	bf00      	nop
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40000c00 	.word	0x40000c00
 800041c:	20000020 	.word	0x20000020

08000420 <Button_InitInterruptMode>:
    button.GPIO_PinConfig.PinPuPdControl = PUPD_CONTROL_NONE;
    Button_EnableClock();
    GPIO_Init(&button);
}

void Button_InitInterruptMode() {
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
    button.pGPIOx = BUTTON_PORT;
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <Button_InitInterruptMode+0x44>)
 8000426:	4a10      	ldr	r2, [pc, #64]	; (8000468 <Button_InitInterruptMode+0x48>)
 8000428:	601a      	str	r2, [r3, #0]
    button.GPIO_PinConfig.PinNumber = BUTTON_PIN_NUM;
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <Button_InitInterruptMode+0x44>)
 800042c:	2200      	movs	r2, #0
 800042e:	711a      	strb	r2, [r3, #4]
    button.GPIO_PinConfig.PinMode = PIN_MODE_CONFIG_GPIN;
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <Button_InitInterruptMode+0x44>)
 8000432:	2200      	movs	r2, #0
 8000434:	715a      	strb	r2, [r3, #5]
    button.GPIO_PinConfig.PinSpeed = OSPEED_MED;
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <Button_InitInterruptMode+0x44>)
 8000438:	2201      	movs	r2, #1
 800043a:	71da      	strb	r2, [r3, #7]
    button.GPIO_PinConfig.OPType = OPTYPE_PUSH_PULL;
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <Button_InitInterruptMode+0x44>)
 800043e:	2200      	movs	r2, #0
 8000440:	719a      	strb	r2, [r3, #6]
    button.GPIO_PinConfig.PinPuPdControl = PUPD_CONTROL_NONE;
 8000442:	4b08      	ldr	r3, [pc, #32]	; (8000464 <Button_InitInterruptMode+0x44>)
 8000444:	2200      	movs	r2, #0
 8000446:	721a      	strb	r2, [r3, #8]
    button.GPIO_PinConfig.PinInterruptMode = FALLING_AND_RISING_INTERRUPT;
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <Button_InitInterruptMode+0x44>)
 800044a:	2203      	movs	r2, #3
 800044c:	729a      	strb	r2, [r3, #10]
    Button_EnableClock();
 800044e:	f000 f80d 	bl	800046c <Button_EnableClock>
    GPIO_Init(&button);
 8000452:	4804      	ldr	r0, [pc, #16]	; (8000464 <Button_InitInterruptMode+0x44>)
 8000454:	f000 f816 	bl	8000484 <GPIO_Init>
    GPIO_EnableOrDisableInterrupt(EXTI0_IRQ_NUMBER, ENABLE);
 8000458:	2101      	movs	r1, #1
 800045a:	2006      	movs	r0, #6
 800045c:	f000 f9d8 	bl	8000810 <GPIO_EnableOrDisableInterrupt>
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000024 	.word	0x20000024
 8000468:	40020000 	.word	0x40020000

0800046c <Button_EnableClock>:

void Button_EnableClock() {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
    GPIO_ClockEnableOrDisable(button.pGPIOx, ENABLE);
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <Button_EnableClock+0x14>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2101      	movs	r1, #1
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f940 	bl	80006fc <GPIO_ClockEnableOrDisable>
}
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000024 	.word	0x20000024

08000484 <GPIO_Init>:
 *      Author: owenallison
 */

#include "GPIO_Driver.h"

void GPIO_Init(GPIO_Handle_t* handle) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]

	uint8_t pin_num = handle -> GPIO_PinConfig.PinNumber;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	791b      	ldrb	r3, [r3, #4]
 8000490:	77fb      	strb	r3, [r7, #31]
	
	// Configure the port mode register
	uint32_t temp = handle -> GPIO_PinConfig.PinMode << (pin_num * 2);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	795b      	ldrb	r3, [r3, #5]
 8000496:	461a      	mov	r2, r3
 8000498:	7ffb      	ldrb	r3, [r7, #31]
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	61bb      	str	r3, [r7, #24]
	handle -> pGPIOx -> MODER &= ~(0x3 << (2 * pin_num));
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	7ffb      	ldrb	r3, [r7, #31]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	2103      	movs	r1, #3
 80004ae:	fa01 f303 	lsl.w	r3, r1, r3
 80004b2:	43db      	mvns	r3, r3
 80004b4:	4619      	mov	r1, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	400a      	ands	r2, r1
 80004bc:	601a      	str	r2, [r3, #0]
	handle -> pGPIOx -> MODER |= temp;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	6819      	ldr	r1, [r3, #0]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	69ba      	ldr	r2, [r7, #24]
 80004ca:	430a      	orrs	r2, r1
 80004cc:	601a      	str	r2, [r3, #0]

	uint8_t interruptMode = handle -> GPIO_PinConfig.PinInterruptMode;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	7a9b      	ldrb	r3, [r3, #10]
 80004d2:	75fb      	strb	r3, [r7, #23]

	if (interruptMode != NO_INTERRUPT_SELECTED) {
 80004d4:	7dfb      	ldrb	r3, [r7, #23]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d077      	beq.n	80005ca <GPIO_Init+0x146>
		if (interruptMode == FALLING_EDGE_INTERRUPT) {
 80004da:	7dfb      	ldrb	r3, [r7, #23]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d115      	bne.n	800050c <GPIO_Init+0x88>
			EXTI -> FTSR |= (1 << pin_num);
 80004e0:	4b83      	ldr	r3, [pc, #524]	; (80006f0 <GPIO_Init+0x26c>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	7ffa      	ldrb	r2, [r7, #31]
 80004e6:	2101      	movs	r1, #1
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a80      	ldr	r2, [pc, #512]	; (80006f0 <GPIO_Init+0x26c>)
 80004f0:	430b      	orrs	r3, r1
 80004f2:	60d3      	str	r3, [r2, #12]
			EXTI -> RTSR &= ~(1 << pin_num);
 80004f4:	4b7e      	ldr	r3, [pc, #504]	; (80006f0 <GPIO_Init+0x26c>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	7ffa      	ldrb	r2, [r7, #31]
 80004fa:	2101      	movs	r1, #1
 80004fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000500:	43d2      	mvns	r2, r2
 8000502:	4611      	mov	r1, r2
 8000504:	4a7a      	ldr	r2, [pc, #488]	; (80006f0 <GPIO_Init+0x26c>)
 8000506:	400b      	ands	r3, r1
 8000508:	6093      	str	r3, [r2, #8]
 800050a:	e02f      	b.n	800056c <GPIO_Init+0xe8>
		}
		else if (interruptMode == RISING_EDGE_INTERRUPT) {
 800050c:	7dfb      	ldrb	r3, [r7, #23]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d115      	bne.n	800053e <GPIO_Init+0xba>
			EXTI -> FTSR &= ~(1 << pin_num);
 8000512:	4b77      	ldr	r3, [pc, #476]	; (80006f0 <GPIO_Init+0x26c>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	7ffa      	ldrb	r2, [r7, #31]
 8000518:	2101      	movs	r1, #1
 800051a:	fa01 f202 	lsl.w	r2, r1, r2
 800051e:	43d2      	mvns	r2, r2
 8000520:	4611      	mov	r1, r2
 8000522:	4a73      	ldr	r2, [pc, #460]	; (80006f0 <GPIO_Init+0x26c>)
 8000524:	400b      	ands	r3, r1
 8000526:	60d3      	str	r3, [r2, #12]
			EXTI -> RTSR |= (1 << pin_num);
 8000528:	4b71      	ldr	r3, [pc, #452]	; (80006f0 <GPIO_Init+0x26c>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	7ffa      	ldrb	r2, [r7, #31]
 800052e:	2101      	movs	r1, #1
 8000530:	fa01 f202 	lsl.w	r2, r1, r2
 8000534:	4611      	mov	r1, r2
 8000536:	4a6e      	ldr	r2, [pc, #440]	; (80006f0 <GPIO_Init+0x26c>)
 8000538:	430b      	orrs	r3, r1
 800053a:	6093      	str	r3, [r2, #8]
 800053c:	e016      	b.n	800056c <GPIO_Init+0xe8>
		}
		else if (interruptMode == FALLING_AND_RISING_INTERRUPT) {
 800053e:	7dfb      	ldrb	r3, [r7, #23]
 8000540:	2b03      	cmp	r3, #3
 8000542:	d113      	bne.n	800056c <GPIO_Init+0xe8>
			EXTI -> FTSR |= (1 << pin_num);
 8000544:	4b6a      	ldr	r3, [pc, #424]	; (80006f0 <GPIO_Init+0x26c>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	7ffa      	ldrb	r2, [r7, #31]
 800054a:	2101      	movs	r1, #1
 800054c:	fa01 f202 	lsl.w	r2, r1, r2
 8000550:	4611      	mov	r1, r2
 8000552:	4a67      	ldr	r2, [pc, #412]	; (80006f0 <GPIO_Init+0x26c>)
 8000554:	430b      	orrs	r3, r1
 8000556:	60d3      	str	r3, [r2, #12]
			EXTI -> RTSR |= (1 << pin_num);
 8000558:	4b65      	ldr	r3, [pc, #404]	; (80006f0 <GPIO_Init+0x26c>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	7ffa      	ldrb	r2, [r7, #31]
 800055e:	2101      	movs	r1, #1
 8000560:	fa01 f202 	lsl.w	r2, r1, r2
 8000564:	4611      	mov	r1, r2
 8000566:	4a62      	ldr	r2, [pc, #392]	; (80006f0 <GPIO_Init+0x26c>)
 8000568:	430b      	orrs	r3, r1
 800056a:	6093      	str	r3, [r2, #8]
		}

		uint8_t regSelect = pin_num/4;
 800056c:	7ffb      	ldrb	r3, [r7, #31]
 800056e:	089b      	lsrs	r3, r3, #2
 8000570:	75bb      	strb	r3, [r7, #22]
		uint8_t pin_loc = pin_num % 4;
 8000572:	7ffb      	ldrb	r3, [r7, #31]
 8000574:	f003 0303 	and.w	r3, r3, #3
 8000578:	757b      	strb	r3, [r7, #21]
		uint16_t portCode = GPIO_ReturnPortCode(handle ->pGPIOx);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f934 	bl	80007ec <GPIO_ReturnPortCode>
 8000584:	4603      	mov	r3, r0
 8000586:	827b      	strh	r3, [r7, #18]
		
		SYSCFG_CLOCK_ENABLE;
 8000588:	4b5a      	ldr	r3, [pc, #360]	; (80006f4 <GPIO_Init+0x270>)
 800058a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800058c:	4a59      	ldr	r2, [pc, #356]	; (80006f4 <GPIO_Init+0x270>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000592:	6453      	str	r3, [r2, #68]	; 0x44

		SYSCFG -> EXTICR[regSelect] |= (portCode << (pin_loc * 4));
 8000594:	4a58      	ldr	r2, [pc, #352]	; (80006f8 <GPIO_Init+0x274>)
 8000596:	7dbb      	ldrb	r3, [r7, #22]
 8000598:	3302      	adds	r3, #2
 800059a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800059e:	8a79      	ldrh	r1, [r7, #18]
 80005a0:	7d7b      	ldrb	r3, [r7, #21]
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	4618      	mov	r0, r3
 80005aa:	4953      	ldr	r1, [pc, #332]	; (80006f8 <GPIO_Init+0x274>)
 80005ac:	7dbb      	ldrb	r3, [r7, #22]
 80005ae:	4302      	orrs	r2, r0
 80005b0:	3302      	adds	r3, #2
 80005b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI -> IMR |= (1 << pin_num);
 80005b6:	4b4e      	ldr	r3, [pc, #312]	; (80006f0 <GPIO_Init+0x26c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	7ffa      	ldrb	r2, [r7, #31]
 80005bc:	2101      	movs	r1, #1
 80005be:	fa01 f202 	lsl.w	r2, r1, r2
 80005c2:	4611      	mov	r1, r2
 80005c4:	4a4a      	ldr	r2, [pc, #296]	; (80006f0 <GPIO_Init+0x26c>)
 80005c6:	430b      	orrs	r3, r1
 80005c8:	6013      	str	r3, [r2, #0]
	}

	// Configure the output speed register
	temp = handle -> GPIO_PinConfig.PinSpeed << (pin_num * 2);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	79db      	ldrb	r3, [r3, #7]
 80005ce:	461a      	mov	r2, r3
 80005d0:	7ffb      	ldrb	r3, [r7, #31]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	fa02 f303 	lsl.w	r3, r2, r3
 80005d8:	61bb      	str	r3, [r7, #24]
	handle -> pGPIOx -> OSPEEDR &= ~(0x3 << (2 * pin_num));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	689a      	ldr	r2, [r3, #8]
 80005e0:	7ffb      	ldrb	r3, [r7, #31]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	2103      	movs	r1, #3
 80005e6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ea:	43db      	mvns	r3, r3
 80005ec:	4619      	mov	r1, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	400a      	ands	r2, r1
 80005f4:	609a      	str	r2, [r3, #8]
	handle -> pGPIOx -> OSPEEDR |= temp;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6899      	ldr	r1, [r3, #8]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	69ba      	ldr	r2, [r7, #24]
 8000602:	430a      	orrs	r2, r1
 8000604:	609a      	str	r2, [r3, #8]

	// Configure the pull-up/pull-down register
	temp = handle -> GPIO_PinConfig.PinPuPdControl << (pin_num * 2);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	7a1b      	ldrb	r3, [r3, #8]
 800060a:	461a      	mov	r2, r3
 800060c:	7ffb      	ldrb	r3, [r7, #31]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	fa02 f303 	lsl.w	r3, r2, r3
 8000614:	61bb      	str	r3, [r7, #24]
	handle -> pGPIOx -> PUPDR &= ~(0x3 << (2 * pin_num));
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	68da      	ldr	r2, [r3, #12]
 800061c:	7ffb      	ldrb	r3, [r7, #31]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	2103      	movs	r1, #3
 8000622:	fa01 f303 	lsl.w	r3, r1, r3
 8000626:	43db      	mvns	r3, r3
 8000628:	4619      	mov	r1, r3
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	400a      	ands	r2, r1
 8000630:	60da      	str	r2, [r3, #12]
	handle -> pGPIOx -> PUPDR |= temp;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	68d9      	ldr	r1, [r3, #12]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	69ba      	ldr	r2, [r7, #24]
 800063e:	430a      	orrs	r2, r1
 8000640:	60da      	str	r2, [r3, #12]

	// Configure the output type register
	temp = handle -> GPIO_PinConfig.OPType << (pin_num);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	799b      	ldrb	r3, [r3, #6]
 8000646:	461a      	mov	r2, r3
 8000648:	7ffb      	ldrb	r3, [r7, #31]
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	61bb      	str	r3, [r7, #24]
	handle -> pGPIOx -> OTYPER &= ~(0x1 << (pin_num));
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	685a      	ldr	r2, [r3, #4]
 8000656:	7ffb      	ldrb	r3, [r7, #31]
 8000658:	2101      	movs	r1, #1
 800065a:	fa01 f303 	lsl.w	r3, r1, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	4619      	mov	r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	400a      	ands	r2, r1
 8000668:	605a      	str	r2, [r3, #4]
	handle -> pGPIOx -> OTYPER |= temp;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6859      	ldr	r1, [r3, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	69ba      	ldr	r2, [r7, #24]
 8000676:	430a      	orrs	r2, r1
 8000678:	605a      	str	r2, [r3, #4]

	/* Check if pin mode is set to alt fun
	If yes, then configure */
	if (handle -> GPIO_PinConfig.PinMode == PIN_MODE_CONFIG_ALTFUN) {
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	795b      	ldrb	r3, [r3, #5]
 800067e:	2b02      	cmp	r3, #2
 8000680:	d131      	bne.n	80006e6 <GPIO_Init+0x262>
		uint32_t altfun_reg = pin_num / 8;
 8000682:	7ffb      	ldrb	r3, [r7, #31]
 8000684:	08db      	lsrs	r3, r3, #3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	60fb      	str	r3, [r7, #12]
		uint32_t pin_loc = pin_num % 8;
 800068a:	7ffb      	ldrb	r3, [r7, #31]
 800068c:	f003 0307 	and.w	r3, r3, #7
 8000690:	60bb      	str	r3, [r7, #8]

		temp = handle -> GPIO_PinConfig.PinAltFunMode << (pin_loc * 4);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	7a5b      	ldrb	r3, [r3, #9]
 8000696:	461a      	mov	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	fa02 f303 	lsl.w	r3, r2, r3
 80006a0:	61bb      	str	r3, [r7, #24]
		handle -> pGPIOx -> AFR[altfun_reg] &= ~(0x7 << (pin_loc * 4));
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	3208      	adds	r2, #8
 80006aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	2107      	movs	r1, #7
 80006b4:	fa01 f303 	lsl.w	r3, r1, r3
 80006b8:	43db      	mvns	r3, r3
 80006ba:	4619      	mov	r1, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4011      	ands	r1, r2
 80006c2:	68fa      	ldr	r2, [r7, #12]
 80006c4:	3208      	adds	r2, #8
 80006c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		handle -> pGPIOx -> AFR[altfun_reg] |= temp;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	3208      	adds	r2, #8
 80006d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	69ba      	ldr	r2, [r7, #24]
 80006dc:	4311      	orrs	r1, r2
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	3208      	adds	r2, #8
 80006e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006e6:	bf00      	nop
 80006e8:	3720      	adds	r7, #32
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40013c00 	.word	0x40013c00
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40013800 	.word	0x40013800

080006fc <GPIO_ClockEnableOrDisable>:
void GPIO_ClockEnableOrDisable(GPIO_RegDef_t* reg, uint8_t enableOrDisable) {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
	
	if (reg == GPIOA) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a19      	ldr	r2, [pc, #100]	; (8000770 <GPIO_ClockEnableOrDisable+0x74>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d113      	bne.n	8000738 <GPIO_ClockEnableOrDisable+0x3c>
		if (enableOrDisable == ENABLE)
 8000710:	78fb      	ldrb	r3, [r7, #3]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d106      	bne.n	8000724 <GPIO_ClockEnableOrDisable+0x28>
			GPIOx_CLOCK_ENABLE(GPIOA_OFFSET);
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <GPIO_ClockEnableOrDisable+0x78>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a16      	ldr	r2, [pc, #88]	; (8000774 <GPIO_ClockEnableOrDisable+0x78>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOx_CLOCK_ENABLE(GPIOG_OFFSET);

		else if (enableOrDisable == DISABLE)
			GPIOx_CLOCK_DISABLE(GPIOG_OFFSET);
	}
}
 8000722:	e020      	b.n	8000766 <GPIO_ClockEnableOrDisable+0x6a>
		else if (enableOrDisable == DISABLE)
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d11d      	bne.n	8000766 <GPIO_ClockEnableOrDisable+0x6a>
			GPIOx_CLOCK_DISABLE(GPIOA_OFFSET);
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <GPIO_ClockEnableOrDisable+0x78>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a11      	ldr	r2, [pc, #68]	; (8000774 <GPIO_ClockEnableOrDisable+0x78>)
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000736:	e016      	b.n	8000766 <GPIO_ClockEnableOrDisable+0x6a>
	else if (reg == GPIOG) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <GPIO_ClockEnableOrDisable+0x7c>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d112      	bne.n	8000766 <GPIO_ClockEnableOrDisable+0x6a>
		if (enableOrDisable == ENABLE)
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d106      	bne.n	8000754 <GPIO_ClockEnableOrDisable+0x58>
			GPIOx_CLOCK_ENABLE(GPIOG_OFFSET);
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <GPIO_ClockEnableOrDisable+0x78>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <GPIO_ClockEnableOrDisable+0x78>)
 800074c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000752:	e008      	b.n	8000766 <GPIO_ClockEnableOrDisable+0x6a>
		else if (enableOrDisable == DISABLE)
 8000754:	78fb      	ldrb	r3, [r7, #3]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d105      	bne.n	8000766 <GPIO_ClockEnableOrDisable+0x6a>
			GPIOx_CLOCK_DISABLE(GPIOG_OFFSET);
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <GPIO_ClockEnableOrDisable+0x78>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a05      	ldr	r2, [pc, #20]	; (8000774 <GPIO_ClockEnableOrDisable+0x78>)
 8000760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	40020000 	.word	0x40020000
 8000774:	40023800 	.word	0x40023800
 8000778:	40021800 	.word	0x40021800

0800077c <GPIO_Toggle>:
void GPIO_Toggle(GPIO_RegDef_t* reg, uint8_t pin_num) {
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
	
	reg -> ODR ^= 1 << pin_num;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	78fa      	ldrb	r2, [r7, #3]
 800078e:	2101      	movs	r1, #1
 8000790:	fa01 f202 	lsl.w	r2, r1, r2
 8000794:	405a      	eors	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	615a      	str	r2, [r3, #20]
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <GPIO_Write>:

void GPIO_Write(GPIO_RegDef_t* reg, uint8_t pin_num, uint8_t val) {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
 80007b0:	4613      	mov	r3, r2
 80007b2:	70bb      	strb	r3, [r7, #2]
	
	if (val == 1) {
 80007b4:	78bb      	ldrb	r3, [r7, #2]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d109      	bne.n	80007ce <GPIO_Write+0x2a>
		reg -> ODR |= 1 << pin_num;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	78fa      	ldrb	r2, [r7, #3]
 80007c0:	2101      	movs	r1, #1
 80007c2:	fa01 f202 	lsl.w	r2, r1, r2
 80007c6:	431a      	orrs	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	615a      	str	r2, [r3, #20]
	} 
	else {
		reg -> ODR &= ~(1 << pin_num);
	}
}
 80007cc:	e009      	b.n	80007e2 <GPIO_Write+0x3e>
		reg -> ODR &= ~(1 << pin_num);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	78fa      	ldrb	r2, [r7, #3]
 80007d4:	2101      	movs	r1, #1
 80007d6:	fa01 f202 	lsl.w	r2, r1, r2
 80007da:	43d2      	mvns	r2, r2
 80007dc:	401a      	ands	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	615a      	str	r2, [r3, #20]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <GPIO_ReturnPortCode>:

uint8_t GPIO_ReadFromPin(GPIO_RegDef_t* reg, uint8_t pin_num) {
	return (uint8_t) ((reg -> IDR >> pin_num) & 0x01);
}

uint16_t GPIO_ReturnPortCode(GPIO_RegDef_t* reg) {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	if (reg == GPIOA)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <GPIO_ReturnPortCode+0x20>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d101      	bne.n	8000800 <GPIO_ReturnPortCode+0x14>
		return 0x0000;
 80007fc:	2300      	movs	r3, #0
 80007fe:	e000      	b.n	8000802 <GPIO_ReturnPortCode+0x16>
	else
		return 0;
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	40020000 	.word	0x40020000

08000810 <GPIO_EnableOrDisableInterrupt>:

void GPIO_EnableOrDisableInterrupt(uint8_t IRQ, uint8_t enableOrDisable) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	460a      	mov	r2, r1
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	4613      	mov	r3, r2
 800081e:	71bb      	strb	r3, [r7, #6]
	if (enableOrDisable == ENABLE) {
 8000820:	79bb      	ldrb	r3, [r7, #6]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d104      	bne.n	8000830 <GPIO_EnableOrDisableInterrupt+0x20>
		InterruptIRQ_Enable(IRQ);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f80c 	bl	8000846 <InterruptIRQ_Enable>
	}
	else if (enableOrDisable == DISABLE) {
		InterruptIRQ_Disable(IRQ);
	}
}
 800082e:	e006      	b.n	800083e <GPIO_EnableOrDisableInterrupt+0x2e>
	else if (enableOrDisable == DISABLE) {
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d103      	bne.n	800083e <GPIO_EnableOrDisableInterrupt+0x2e>
		InterruptIRQ_Disable(IRQ);
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f83f 	bl	80008bc <InterruptIRQ_Disable>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <InterruptIRQ_Enable>:
 */

#include "InterruptControl.h"

void InterruptIRQ_Enable(uint8_t IRQ)
{
 8000846:	b480      	push	{r7}
 8000848:	b085      	sub	sp, #20
 800084a:	af00      	add	r7, sp, #0
 800084c:	4603      	mov	r3, r0
 800084e:	71fb      	strb	r3, [r7, #7]
    /*uint8_t shift = IRQ % 32;
    *NVIC_SET_ENABLE |= (1 << shift);*/

    uint8_t regSelect = IRQ / 32;
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = IRQ % 32;
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	f003 031f 	and.w	r3, r3, #31
 800085c:	73bb      	strb	r3, [r7, #14]

    *(NVIC_SET_ENABLE + regSelect) &= ~(1 << shift);
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000866:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	2101      	movs	r1, #1
 8000870:	fa01 f303 	lsl.w	r3, r1, r3
 8000874:	43db      	mvns	r3, r3
 8000876:	4619      	mov	r1, r3
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000880:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000884:	400a      	ands	r2, r1
 8000886:	601a      	str	r2, [r3, #0]
    *(NVIC_SET_ENABLE + regSelect) |= (1 << shift);
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000890:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	7bbb      	ldrb	r3, [r7, #14]
 8000898:	2101      	movs	r1, #1
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	4619      	mov	r1, r3
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80008a8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80008ac:	430a      	orrs	r2, r1
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
	...

080008bc <InterruptIRQ_Disable>:

void InterruptIRQ_Disable(uint8_t IRQ)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
    /*uint8_t shift = IRQ % 32;
    *NVIC_CLEAR_ENABLE |= (1 << shift);*/

    uint8_t regSelect = IRQ / 32;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	095b      	lsrs	r3, r3, #5
 80008ca:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = IRQ % 32;
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 031f 	and.w	r3, r3, #31
 80008d2:	73bb      	strb	r3, [r7, #14]

    *(NVIC_CLEAR_ENABLE + regSelect) &= ~(1 << shift);
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	009a      	lsls	r2, r3, #2
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <InterruptIRQ_Disable+0x64>)
 80008da:	4413      	add	r3, r2
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	7bbb      	ldrb	r3, [r7, #14]
 80008e0:	2101      	movs	r1, #1
 80008e2:	fa01 f303 	lsl.w	r3, r1, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	0099      	lsls	r1, r3, #2
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <InterruptIRQ_Disable+0x64>)
 80008f0:	440b      	add	r3, r1
 80008f2:	4002      	ands	r2, r0
 80008f4:	601a      	str	r2, [r3, #0]
    *(NVIC_CLEAR_ENABLE + regSelect) |= (1 << shift);
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	009a      	lsls	r2, r3, #2
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <InterruptIRQ_Disable+0x64>)
 80008fc:	4413      	add	r3, r2
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	7bbb      	ldrb	r3, [r7, #14]
 8000902:	2101      	movs	r1, #1
 8000904:	fa01 f303 	lsl.w	r3, r1, r3
 8000908:	4618      	mov	r0, r3
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	0099      	lsls	r1, r3, #2
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <InterruptIRQ_Disable+0x64>)
 8000910:	440b      	add	r3, r1
 8000912:	4302      	orrs	r2, r0
 8000914:	601a      	str	r2, [r3, #0]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	e000e180 	.word	0xe000e180

08000924 <InterruptIRQ_Clear_Pending>:

void InterruptIRQ_Clear_Pending(uint8_t IRQ)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
	/*uint8_t shift = IRQ % 32;
	*NVIC_CLEAR_PENDING |= (1 << shift);*/

    uint8_t regSelect = IRQ / 32;
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	095b      	lsrs	r3, r3, #5
 8000932:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = IRQ % 32;
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 031f 	and.w	r3, r3, #31
 800093a:	73bb      	strb	r3, [r7, #14]

    *(NVIC_CLEAR_PENDING + regSelect) &= ~(1 << shift);
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	009a      	lsls	r2, r3, #2
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <InterruptIRQ_Clear_Pending+0x64>)
 8000942:	4413      	add	r3, r2
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	7bbb      	ldrb	r3, [r7, #14]
 8000948:	2101      	movs	r1, #1
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	4618      	mov	r0, r3
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	0099      	lsls	r1, r3, #2
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <InterruptIRQ_Clear_Pending+0x64>)
 8000958:	440b      	add	r3, r1
 800095a:	4002      	ands	r2, r0
 800095c:	601a      	str	r2, [r3, #0]
    *(NVIC_CLEAR_PENDING + regSelect) |= (1 << shift);
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	009a      	lsls	r2, r3, #2
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <InterruptIRQ_Clear_Pending+0x64>)
 8000964:	4413      	add	r3, r2
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	7bbb      	ldrb	r3, [r7, #14]
 800096a:	2101      	movs	r1, #1
 800096c:	fa01 f303 	lsl.w	r3, r1, r3
 8000970:	4618      	mov	r0, r3
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	0099      	lsls	r1, r3, #2
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <InterruptIRQ_Clear_Pending+0x64>)
 8000978:	440b      	add	r3, r1
 800097a:	4302      	orrs	r2, r0
 800097c:	601a      	str	r2, [r3, #0]
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	e000e280 	.word	0xe000e280

0800098c <EXTI_Clear_Pending>:
    val &= ~(bitField << shift);
    val |= bitField << shift;
}

void EXTI_Clear_Pending(uint8_t pin_num)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
    EXTI -> PR |= (1 << pin_num);
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <EXTI_Clear_Pending+0x28>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	79fa      	ldrb	r2, [r7, #7]
 800099c:	2101      	movs	r1, #1
 800099e:	fa01 f202 	lsl.w	r2, r1, r2
 80009a2:	4611      	mov	r1, r2
 80009a4:	4a03      	ldr	r2, [pc, #12]	; (80009b4 <EXTI_Clear_Pending+0x28>)
 80009a6:	430b      	orrs	r3, r1
 80009a8:	6153      	str	r3, [r2, #20]
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	40013c00 	.word	0x40013c00

080009b8 <LED_Init>:
static GPIO_Handle_t green;

static Timer_Handle_t TIM2handle;
static Timer_Handle_t TIM5handle;

void LED_Init(uint8_t led) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d01b      	beq.n	8000a00 <LED_Init+0x48>
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d131      	bne.n	8000a30 <LED_Init+0x78>
        case RED_LED:
            red.pGPIOx = GPIOG;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <LED_Init+0x80>)
 80009ce:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <LED_Init+0x84>)
 80009d0:	601a      	str	r2, [r3, #0]
            red.GPIO_PinConfig.PinNumber = RED_LED_PORT;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <LED_Init+0x80>)
 80009d4:	220e      	movs	r2, #14
 80009d6:	711a      	strb	r2, [r3, #4]
            red.GPIO_PinConfig.PinMode = PIN_MODE_CONFIG_GPOUT;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <LED_Init+0x80>)
 80009da:	2201      	movs	r2, #1
 80009dc:	715a      	strb	r2, [r3, #5]
            red.GPIO_PinConfig.PinSpeed = OSPEED_MED;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <LED_Init+0x80>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	71da      	strb	r2, [r3, #7]
            red.GPIO_PinConfig.OPType = OPTYPE_PUSH_PULL;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <LED_Init+0x80>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	719a      	strb	r2, [r3, #6]
            red.GPIO_PinConfig.PinPuPdControl = PUPD_CONTROL_NONE;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <LED_Init+0x80>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	721a      	strb	r2, [r3, #8]
            LED_EnableClock(RED_LED);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f000 f827 	bl	8000a44 <LED_EnableClock>
            GPIO_Init(&red);
 80009f6:	4810      	ldr	r0, [pc, #64]	; (8000a38 <LED_Init+0x80>)
 80009f8:	f7ff fd44 	bl	8000484 <GPIO_Init>
            break;
 80009fc:	bf00      	nop
            green.GPIO_PinConfig.OPType = OPTYPE_PUSH_PULL;
            green.GPIO_PinConfig.PinPuPdControl = PUPD_CONTROL_NONE;
            LED_EnableClock(GREEN_LED);
            GPIO_Init(&green);
    }
}
 80009fe:	e017      	b.n	8000a30 <LED_Init+0x78>
            green.pGPIOx = GPIOG;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <LED_Init+0x88>)
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <LED_Init+0x84>)
 8000a04:	601a      	str	r2, [r3, #0]
            green.GPIO_PinConfig.PinNumber = GREEN_LED_PORT;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <LED_Init+0x88>)
 8000a08:	220d      	movs	r2, #13
 8000a0a:	711a      	strb	r2, [r3, #4]
            green.GPIO_PinConfig.PinMode = PIN_MODE_CONFIG_GPOUT;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <LED_Init+0x88>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	715a      	strb	r2, [r3, #5]
            green.GPIO_PinConfig.PinSpeed = OSPEED_MED;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <LED_Init+0x88>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	71da      	strb	r2, [r3, #7]
            green.GPIO_PinConfig.OPType = OPTYPE_PUSH_PULL;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <LED_Init+0x88>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	719a      	strb	r2, [r3, #6]
            green.GPIO_PinConfig.PinPuPdControl = PUPD_CONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <LED_Init+0x88>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	721a      	strb	r2, [r3, #8]
            LED_EnableClock(GREEN_LED);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 f80d 	bl	8000a44 <LED_EnableClock>
            GPIO_Init(&green);
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <LED_Init+0x88>)
 8000a2c:	f7ff fd2a 	bl	8000484 <GPIO_Init>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000030 	.word	0x20000030
 8000a3c:	40021800 	.word	0x40021800
 8000a40:	2000003c 	.word	0x2000003c

08000a44 <LED_EnableClock>:
void LED_EnableClock(uint8_t led) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d009      	beq.n	8000a68 <LED_EnableClock+0x24>
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d10d      	bne.n	8000a74 <LED_EnableClock+0x30>
        case RED_LED:
            GPIO_ClockEnableOrDisable(red.pGPIOx, ENABLE);
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <LED_EnableClock+0x38>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fe4c 	bl	80006fc <GPIO_ClockEnableOrDisable>
            break;
 8000a64:	bf00      	nop
        case GREEN_LED:
            GPIO_ClockEnableOrDisable(green.pGPIOx, ENABLE);
    }
}
 8000a66:	e005      	b.n	8000a74 <LED_EnableClock+0x30>
            GPIO_ClockEnableOrDisable(green.pGPIOx, ENABLE);
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <LED_EnableClock+0x3c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fe44 	bl	80006fc <GPIO_ClockEnableOrDisable>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000030 	.word	0x20000030
 8000a80:	2000003c 	.word	0x2000003c

08000a84 <LED_Disable>:
        case GREEN_LED:
            GPIO_Write(GPIOG, green.GPIO_PinConfig.PinNumber, ENABLE);
    }
}

void LED_Disable(uint8_t led) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00a      	beq.n	8000aaa <LED_Disable+0x26>
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d10f      	bne.n	8000ab8 <LED_Disable+0x34>
        case RED_LED:
            GPIO_Write(GPIOG, red.GPIO_PinConfig.PinNumber, DISABLE);
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <LED_Disable+0x3c>)
 8000a9a:	791b      	ldrb	r3, [r3, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <LED_Disable+0x40>)
 8000aa2:	f7ff fe7f 	bl	80007a4 <GPIO_Write>
            break;
 8000aa6:	bf00      	nop
        case GREEN_LED:
            GPIO_Write(GPIOG, green.GPIO_PinConfig.PinNumber, DISABLE);
    }
}
 8000aa8:	e006      	b.n	8000ab8 <LED_Disable+0x34>
            GPIO_Write(GPIOG, green.GPIO_PinConfig.PinNumber, DISABLE);
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <LED_Disable+0x44>)
 8000aac:	791b      	ldrb	r3, [r3, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <LED_Disable+0x40>)
 8000ab4:	f7ff fe76 	bl	80007a4 <GPIO_Write>
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000030 	.word	0x20000030
 8000ac4:	40021800 	.word	0x40021800
 8000ac8:	2000003c 	.word	0x2000003c

08000acc <LED_Toggle>:

void LED_Toggle(uint8_t led) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d009      	beq.n	8000af0 <LED_Toggle+0x24>
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d10d      	bne.n	8000afc <LED_Toggle+0x30>
        case RED_LED:
            GPIO_Toggle(GPIOG, red.GPIO_PinConfig.PinNumber);
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <LED_Toggle+0x38>)
 8000ae2:	791b      	ldrb	r3, [r3, #4]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4808      	ldr	r0, [pc, #32]	; (8000b08 <LED_Toggle+0x3c>)
 8000ae8:	f7ff fe48 	bl	800077c <GPIO_Toggle>
            break;
 8000aec:	bf00      	nop
        case GREEN_LED:
            GPIO_Toggle(GPIOG, green.GPIO_PinConfig.PinNumber);
    }
}
 8000aee:	e005      	b.n	8000afc <LED_Toggle+0x30>
            GPIO_Toggle(GPIOG, green.GPIO_PinConfig.PinNumber);
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <LED_Toggle+0x40>)
 8000af2:	791b      	ldrb	r3, [r3, #4]
 8000af4:	4619      	mov	r1, r3
 8000af6:	4804      	ldr	r0, [pc, #16]	; (8000b08 <LED_Toggle+0x3c>)
 8000af8:	f7ff fe40 	bl	800077c <GPIO_Toggle>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000030 	.word	0x20000030
 8000b08:	40021800 	.word	0x40021800
 8000b0c:	2000003c 	.word	0x2000003c

08000b10 <LED_Timer2_Init>:

void LED_Timer2_Init() {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    TIM2handle.timer = TIM2;
 8000b14:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1a:	601a      	str	r2, [r3, #0]

    TIM2handle.timerConfig.masterModeSelection = MMS_RESET;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	719a      	strb	r2, [r3, #6]
    TIM2handle.timerConfig.autoReloadValue = 100;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b24:	2264      	movs	r2, #100	; 0x64
 8000b26:	809a      	strh	r2, [r3, #4]
    TIM2handle.timerConfig.clockDivisionValue = CLOCK_DIVISION_1T;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	71da      	strb	r2, [r3, #7]
    TIM2handle.timerConfig.prescalerValue = PRESCALER_DIV8;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b30:	2203      	movs	r2, #3
 8000b32:	721a      	strb	r2, [r3, #8]
    TIM2handle.timerConfig.centerAlignedModeSelect = CENTER_ALIGNED_MODE_EDGE;
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	725a      	strb	r2, [r3, #9]
    TIM2handle.timerConfig.autoReloadBufferEnabled = true;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	729a      	strb	r2, [r3, #10]
    TIM2handle.timerConfig.timerCountdownModeEnabled = false;
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	72da      	strb	r2, [r3, #11]
    TIM2handle.timerConfig.interruptUpdateEnabled = true;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	731a      	strb	r2, [r3, #12]
    TIM2handle.timerConfig.disableUpdateEvent = false;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	735a      	strb	r2, [r3, #13]
    TIM2handle.timerConfig.onePulseModeEnabled = false;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	739a      	strb	r2, [r3, #14]
    TIM2handle.timerConfig.channel1Config.channelMode = CHANNEL_MODE_FROZEN;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	741a      	strb	r2, [r3, #16]
    TIM2handle.timerConfig.channel1Config.captureCompareSelection = CAPTURE_COMPARE_SELECTION_OUTPUT;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	745a      	strb	r2, [r3, #17]
    TIM2handle.timerConfig.channel1Config.captureCompareValue = 90;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b66:	225a      	movs	r2, #90	; 0x5a
 8000b68:	825a      	strh	r2, [r3, #18]
    TIM2handle.timerConfig.channel1Config.outputCompareFastEnabled = false;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	751a      	strb	r2, [r3, #20]
    TIM2handle.timerConfig.channel1Config.outputComparePreloadEnabled = true;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	755a      	strb	r2, [r3, #21]
    TIM2handle.timerConfig.channel1Config.outputCompareClearEnabled = false;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	759a      	strb	r2, [r3, #22]
    TIM2handle.timerConfig.channel1Config.outputChannelInterruptEnabled = true;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	75da      	strb	r2, [r3, #23]

    Timer_Toggle_Clock(TIM2, ENABLE);
 8000b82:	2101      	movs	r1, #1
 8000b84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000b88:	f000 fa10 	bl	8000fac <Timer_Toggle_Clock>
    Timer_Init(&TIM2handle);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <LED_Timer2_Init+0x88>)
 8000b8e:	f000 f88f 	bl	8000cb0 <Timer_Init>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000048 	.word	0x20000048

08000b9c <LED_Timer2_Start>:
void LED_Timer2_Start() {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
    Timer_Start(TIM2);
 8000ba0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ba4:	f000 fa3a 	bl	800101c <Timer_Start>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <LED_Timer2_Reset>:
void LED_Timer2_Stop() {
    Timer_Stop(TIM2);
}
void LED_Timer2_Reset() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
    Timer_Reset(TIM2);
 8000bb0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bb4:	f000 fa41 	bl	800103a <Timer_Reset>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <LED_Timer5_Init>:
}
void LED_Timer2_Priority_Reset() {
    Timer_Change_Priority(TIM2, TIM2_DEFAULT_PRIORITY);
}

void LED_Timer5_Init() {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    TIM5handle.timer = TIM5;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000bc2:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <LED_Timer5_Init+0x88>)
 8000bc4:	601a      	str	r2, [r3, #0]

    TIM5handle.timerConfig.masterModeSelection = MMS_RESET;
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	719a      	strb	r2, [r3, #6]
	TIM5handle.timerConfig.autoReloadValue = 100;
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000bce:	2264      	movs	r2, #100	; 0x64
 8000bd0:	809a      	strh	r2, [r3, #4]
	TIM5handle.timerConfig.clockDivisionValue = CLOCK_DIVISION_1T;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	71da      	strb	r2, [r3, #7]
	TIM5handle.timerConfig.prescalerValue = PRESCALER_DIV8;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000bda:	2203      	movs	r2, #3
 8000bdc:	721a      	strb	r2, [r3, #8]
	TIM5handle.timerConfig.centerAlignedModeSelect = CENTER_ALIGNED_MODE_EDGE;
 8000bde:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	725a      	strb	r2, [r3, #9]
	TIM5handle.timerConfig.autoReloadBufferEnabled = true;
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	729a      	strb	r2, [r3, #10]
	TIM5handle.timerConfig.timerCountdownModeEnabled = false;
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	72da      	strb	r2, [r3, #11]
	TIM5handle.timerConfig.interruptUpdateEnabled = true;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	731a      	strb	r2, [r3, #12]
	TIM5handle.timerConfig.disableUpdateEvent = false;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	735a      	strb	r2, [r3, #13]
	TIM5handle.timerConfig.onePulseModeEnabled = false;
 8000bfc:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	739a      	strb	r2, [r3, #14]
	TIM5handle.timerConfig.channel1Config.channelMode = CHANNEL_MODE_FROZEN;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	741a      	strb	r2, [r3, #16]
	TIM5handle.timerConfig.channel1Config.captureCompareSelection = CAPTURE_COMPARE_SELECTION_OUTPUT;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	745a      	strb	r2, [r3, #17]
	TIM5handle.timerConfig.channel1Config.captureCompareValue = 100;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000c10:	2264      	movs	r2, #100	; 0x64
 8000c12:	825a      	strh	r2, [r3, #18]
	TIM5handle.timerConfig.channel1Config.outputCompareFastEnabled = false;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	751a      	strb	r2, [r3, #20]
	TIM5handle.timerConfig.channel1Config.outputComparePreloadEnabled = true;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	755a      	strb	r2, [r3, #21]
	TIM5handle.timerConfig.channel1Config.outputCompareClearEnabled = false;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	759a      	strb	r2, [r3, #22]
	TIM5handle.timerConfig.channel1Config.outputChannelInterruptEnabled = true;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	75da      	strb	r2, [r3, #23]

    Timer_Toggle_Clock(TIM5, ENABLE);
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <LED_Timer5_Init+0x88>)
 8000c30:	f000 f9bc 	bl	8000fac <Timer_Toggle_Clock>
    Timer_Init(&TIM5handle);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <LED_Timer5_Init+0x84>)
 8000c36:	f000 f83b 	bl	8000cb0 <Timer_Init>
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000060 	.word	0x20000060
 8000c44:	40000c00 	.word	0x40000c00

08000c48 <LED_Timer5_Start>:
void LED_Timer5_Start() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
    Timer_Start(TIM5);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <LED_Timer5_Start+0x10>)
 8000c4e:	f000 f9e5 	bl	800101c <Timer_Start>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40000c00 	.word	0x40000c00

08000c5c <LED_Timer5_Reset>:
void LED_Timer5_Stop() {
    Timer_Stop(TIM5);
}
void LED_Timer5_Reset() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    Timer_Reset(TIM5);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <LED_Timer5_Reset+0x10>)
 8000c62:	f000 f9ea 	bl	800103a <Timer_Reset>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40000c00 	.word	0x40000c00

08000c70 <getScheduledEvents>:

#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents() {
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
    return scheduledEvents;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <getScheduledEvents+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000078 	.word	0x20000078

08000c84 <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event) {
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
    scheduledEvents |= 1 << event;
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <addSchedulerEvent+0x28>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	4a03      	ldr	r2, [pc, #12]	; (8000cac <addSchedulerEvent+0x28>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000078 	.word	0x20000078

08000cb0 <Timer_Init>:
 *      Author: owenallison
 */

#include "Timer_Driver.h"

void Timer_Init(Timer_Handle_t* handle) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    uint32_t temp = handle -> timerConfig.autoReloadValue;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	889b      	ldrh	r3, [r3, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]
    handle -> timer -> ARR &= ~(0xFFFF << 16);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	b292      	uxth	r2, r2
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
    handle -> timer -> ARR |= temp << 16;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	041a      	lsls	r2, r3, #16
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	62da      	str	r2, [r3, #44]	; 0x2c

    temp = handle -> timerConfig.masterModeSelection;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	799b      	ldrb	r3, [r3, #6]
 8000ce2:	60fb      	str	r3, [r7, #12]
    handle -> timer -> CR2 &= ~(0x7 << 4);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000cf2:	605a      	str	r2, [r3, #4]
    handle -> timer -> CR2 |= temp << 4;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6859      	ldr	r1, [r3, #4]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	011a      	lsls	r2, r3, #4
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	430a      	orrs	r2, r1
 8000d04:	605a      	str	r2, [r3, #4]

    temp = handle -> timerConfig.clockDivisionValue;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	79db      	ldrb	r3, [r3, #7]
 8000d0a:	60fb      	str	r3, [r7, #12]
    handle -> timer -> CR1 &= ~(0x3 << 8);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d1a:	601a      	str	r2, [r3, #0]
    handle -> timer -> CR1 |= temp << 8;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6819      	ldr	r1, [r3, #0]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	021a      	lsls	r2, r3, #8
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	601a      	str	r2, [r3, #0]

    temp = handle -> timerConfig.prescalerValue;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7a1b      	ldrb	r3, [r3, #8]
 8000d32:	60fb      	str	r3, [r7, #12]
    handle -> timer -> SMCR &= ~(0x3 << 12);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689a      	ldr	r2, [r3, #8]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000d42:	609a      	str	r2, [r3, #8]
    handle -> timer -> SMCR |= temp << 12;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6899      	ldr	r1, [r3, #8]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	031a      	lsls	r2, r3, #12
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	609a      	str	r2, [r3, #8]

    temp = handle -> timerConfig.centerAlignedModeSelect;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	7a5b      	ldrb	r3, [r3, #9]
 8000d5a:	60fb      	str	r3, [r7, #12]
    handle -> timer -> CR1 &= ~(0x3 << 5);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000d6a:	601a      	str	r2, [r3, #0]
    handle -> timer -> CR1 |= temp << 5;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6819      	ldr	r1, [r3, #0]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	015a      	lsls	r2, r3, #5
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	601a      	str	r2, [r3, #0]

    bool temp2 = handle -> timerConfig.autoReloadBufferEnabled;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7a9b      	ldrb	r3, [r3, #10]
 8000d82:	72fb      	strb	r3, [r7, #11]
    handle -> timer -> CR1 &= ~(0x1 << 7);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d92:	601a      	str	r2, [r3, #0]
    handle -> timer -> CR1 |= temp2 << 7;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	7afb      	ldrb	r3, [r7, #11]
 8000d9c:	01db      	lsls	r3, r3, #7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	430a      	orrs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]

    temp2 = handle -> timerConfig.timerCountdownModeEnabled;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7adb      	ldrb	r3, [r3, #11]
 8000dac:	72fb      	strb	r3, [r7, #11]
    handle -> timer -> CR1 &= ~(0x1 << 4);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 0210 	bic.w	r2, r2, #16
 8000dbc:	601a      	str	r2, [r3, #0]
    handle -> timer -> CR1 |= temp2 << 4;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	7afb      	ldrb	r3, [r7, #11]
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	4619      	mov	r1, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	601a      	str	r2, [r3, #0]

    temp2 = handle -> timerConfig.interruptUpdateEnabled;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7b1b      	ldrb	r3, [r3, #12]
 8000dd6:	72fb      	strb	r3, [r7, #11]
    handle -> timer -> DIER &= ~(0x1 << 0);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f022 0201 	bic.w	r2, r2, #1
 8000de6:	60da      	str	r2, [r3, #12]
    handle -> timer -> DIER |= temp2 << 0;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68d9      	ldr	r1, [r3, #12]
 8000dee:	7afa      	ldrb	r2, [r7, #11]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	60da      	str	r2, [r3, #12]

    temp2 = handle -> timerConfig.disableUpdateEvent;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	7b5b      	ldrb	r3, [r3, #13]
 8000dfc:	72fb      	strb	r3, [r7, #11]
    handle -> timer -> CR1 &= ~(0x1 << 1);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f022 0202 	bic.w	r2, r2, #2
 8000e0c:	601a      	str	r2, [r3, #0]
    handle -> timer -> CR1 |= temp2 << 1;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	7afb      	ldrb	r3, [r7, #11]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4619      	mov	r1, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]

    temp2 = handle -> timerConfig.onePulseModeEnabled;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7b9b      	ldrb	r3, [r3, #14]
 8000e26:	72fb      	strb	r3, [r7, #11]
    handle -> timer -> CR1 &= ~(0x1 << 3);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0208 	bic.w	r2, r2, #8
 8000e36:	601a      	str	r2, [r3, #0]
    handle -> timer -> CR1 |= temp2 << 3;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	7afb      	ldrb	r3, [r7, #11]
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	4619      	mov	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]

    Timer_Init_Channel_1(handle);
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f000 f815 	bl	8000e7c <Timer_Init_Channel_1>

    if (handle -> timerConfig.interruptUpdateEnabled && !handle -> timerConfig.disableUpdateEvent)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	7b1b      	ldrb	r3, [r3, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00c      	beq.n	8000e74 <Timer_Init+0x1c4>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7b5b      	ldrb	r3, [r3, #13]
 8000e5e:	f083 0301 	eor.w	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d005      	beq.n	8000e74 <Timer_Init+0x1c4>
        Timer_Toggle_Interrupt(handle -> timer, ENABLE);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f8f2 	bl	8001058 <Timer_Toggle_Interrupt>
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <Timer_Init_Channel_1>:

void Timer_Init_Channel_1(Timer_Handle_t* handle) {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    uint32_t temp = handle -> timerConfig.channel1Config.channelMode;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7c1b      	ldrb	r3, [r3, #16]
 8000e88:	60fb      	str	r3, [r7, #12]
    handle -> timer -> CCMR1 &= ~(0x7 << 4);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	699a      	ldr	r2, [r3, #24]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e98:	619a      	str	r2, [r3, #24]
    handle -> timer -> CCMR1 |= temp << 4;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6999      	ldr	r1, [r3, #24]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	011a      	lsls	r2, r3, #4
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	619a      	str	r2, [r3, #24]

    temp = handle -> timerConfig.channel1Config.captureCompareSelection;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7c5b      	ldrb	r3, [r3, #17]
 8000eb0:	60fb      	str	r3, [r7, #12]
    handle -> timer -> CCMR1 &= ~(0x2 << 0);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	699a      	ldr	r2, [r3, #24]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0202 	bic.w	r2, r2, #2
 8000ec0:	619a      	str	r2, [r3, #24]
    handle -> timer -> CCMR1 |= temp << 0;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6999      	ldr	r1, [r3, #24]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	619a      	str	r2, [r3, #24]

    temp = handle -> timerConfig.channel1Config.captureCompareValue;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	8a5b      	ldrh	r3, [r3, #18]
 8000ed6:	60fb      	str	r3, [r7, #12]
    handle -> timer -> CCR1 &= ~(0xFFFF << 0);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	6812      	ldr	r2, [r2, #0]
 8000ee2:	0c1b      	lsrs	r3, r3, #16
 8000ee4:	041b      	lsls	r3, r3, #16
 8000ee6:	6353      	str	r3, [r2, #52]	; 0x34
    handle -> timer -> CCR1 |= temp << 0;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	635a      	str	r2, [r3, #52]	; 0x34

    bool temp2 = handle -> timerConfig.channel1Config.outputCompareFastEnabled;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7d1b      	ldrb	r3, [r3, #20]
 8000efc:	72fb      	strb	r3, [r7, #11]
    handle -> timer -> CCMR1 &= ~(0x1 << 2);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	699a      	ldr	r2, [r3, #24]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0204 	bic.w	r2, r2, #4
 8000f0c:	619a      	str	r2, [r3, #24]
    handle -> timer -> CCMR1 |= temp2 << 2;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	699a      	ldr	r2, [r3, #24]
 8000f14:	7afb      	ldrb	r3, [r7, #11]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	619a      	str	r2, [r3, #24]

    temp2 = handle -> timerConfig.channel1Config.outputComparePreloadEnabled;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7d5b      	ldrb	r3, [r3, #21]
 8000f26:	72fb      	strb	r3, [r7, #11]
    handle -> timer -> CCMR1 &= (0x1 << 3);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	699a      	ldr	r2, [r3, #24]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f002 0208 	and.w	r2, r2, #8
 8000f36:	619a      	str	r2, [r3, #24]
    handle -> timer -> CCMR1 |= temp2 << 3;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	699a      	ldr	r2, [r3, #24]
 8000f3e:	7afb      	ldrb	r3, [r7, #11]
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	4619      	mov	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	619a      	str	r2, [r3, #24]

    temp2 = handle -> timerConfig.channel1Config.outputCompareClearEnabled;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7d9b      	ldrb	r3, [r3, #22]
 8000f50:	72fb      	strb	r3, [r7, #11]
    handle -> timer -> CCMR1 &= (0x1 << 7);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	699a      	ldr	r2, [r3, #24]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f60:	619a      	str	r2, [r3, #24]
    handle -> timer -> CCMR1 |= temp2 << 7;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	699a      	ldr	r2, [r3, #24]
 8000f68:	7afb      	ldrb	r3, [r7, #11]
 8000f6a:	01db      	lsls	r3, r3, #7
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	619a      	str	r2, [r3, #24]

    temp2 = handle -> timerConfig.channel1Config.outputChannelInterruptEnabled;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	7ddb      	ldrb	r3, [r3, #23]
 8000f7a:	72fb      	strb	r3, [r7, #11]
    handle -> timer -> DIER &= (0x1 << 1);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f002 0202 	and.w	r2, r2, #2
 8000f8a:	60da      	str	r2, [r3, #12]
    handle -> timer -> DIER |= temp2 << 1;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	7afb      	ldrb	r3, [r7, #11]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4619      	mov	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	60da      	str	r2, [r3, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <Timer_Toggle_Clock>:

void Timer_Toggle_Clock(GPTIMR_RegDef_t* reg, uint8_t toggle) {
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
    if (reg == TIM2) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fbe:	d110      	bne.n	8000fe2 <Timer_Toggle_Clock+0x36>
        if (toggle == ENABLE)
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d106      	bne.n	8000fd4 <Timer_Toggle_Clock+0x28>
            TIMx_CLOCK_ENABLE(TIM2_OFFSET);
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <Timer_Toggle_Clock+0x68>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <Timer_Toggle_Clock+0x68>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
        if (toggle == ENABLE)
            TIMx_CLOCK_ENABLE(TIM5_OFFSET);
        else
            TIMx_CLOCK_DISABLE(TIM5_OFFSET);
    }
}
 8000fd2:	e01a      	b.n	800100a <Timer_Toggle_Clock+0x5e>
            TIMx_CLOCK_DISABLE(TIM2_OFFSET);
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <Timer_Toggle_Clock+0x68>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <Timer_Toggle_Clock+0x68>)
 8000fda:	f023 0301 	bic.w	r3, r3, #1
 8000fde:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fe0:	e013      	b.n	800100a <Timer_Toggle_Clock+0x5e>
    else if (reg == TIM5) {
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <Timer_Toggle_Clock+0x6c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d10f      	bne.n	800100a <Timer_Toggle_Clock+0x5e>
        if (toggle == ENABLE)
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d106      	bne.n	8000ffe <Timer_Toggle_Clock+0x52>
            TIMx_CLOCK_ENABLE(TIM5_OFFSET);
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <Timer_Toggle_Clock+0x68>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <Timer_Toggle_Clock+0x68>)
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ffc:	e005      	b.n	800100a <Timer_Toggle_Clock+0x5e>
            TIMx_CLOCK_DISABLE(TIM5_OFFSET);
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <Timer_Toggle_Clock+0x68>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <Timer_Toggle_Clock+0x68>)
 8001004:	f023 0308 	bic.w	r3, r3, #8
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	40023800 	.word	0x40023800
 8001018:	40000c00 	.word	0x40000c00

0800101c <Timer_Start>:

void Timer_Start(GPTIMR_RegDef_t* reg) {
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
    reg -> CR1 |= (0x1);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f043 0201 	orr.w	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <Timer_Reset>:

void Timer_Stop(GPTIMR_RegDef_t* reg) {
    reg -> CR1 &= ~(0x1);
}

void Timer_Reset(GPTIMR_RegDef_t* reg) {
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
    reg -> CNT &= (0x0);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
	...

08001058 <Timer_Toggle_Interrupt>:

uint32_t Timer_Return_Value(GPTIMR_RegDef_t* reg) {
    return reg -> CNT;
}

void Timer_Toggle_Interrupt(GPTIMR_RegDef_t* reg, uint8_t toggle) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
    if (reg == TIM2) {
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106a:	d10a      	bne.n	8001082 <Timer_Toggle_Interrupt+0x2a>
        if (toggle == ENABLE)
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d103      	bne.n	800107a <Timer_Toggle_Interrupt+0x22>
            InterruptIRQ_Enable(TIM2_IRQ_NUMBER);
 8001072:	201c      	movs	r0, #28
 8001074:	f7ff fbe7 	bl	8000846 <InterruptIRQ_Enable>
        if (toggle == ENABLE)
            InterruptIRQ_Enable(TIM5_IRQ_NUMBER);
        else
            InterruptIRQ_Disable(TIM5_IRQ_NUMBER);
    }
}
 8001078:	e011      	b.n	800109e <Timer_Toggle_Interrupt+0x46>
            InterruptIRQ_Disable(TIM2_IRQ_NUMBER);
 800107a:	201c      	movs	r0, #28
 800107c:	f7ff fc1e 	bl	80008bc <InterruptIRQ_Disable>
}
 8001080:	e00d      	b.n	800109e <Timer_Toggle_Interrupt+0x46>
    else if (reg == TIM5) {
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <Timer_Toggle_Interrupt+0x50>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d109      	bne.n	800109e <Timer_Toggle_Interrupt+0x46>
        if (toggle == ENABLE)
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d103      	bne.n	8001098 <Timer_Toggle_Interrupt+0x40>
            InterruptIRQ_Enable(TIM5_IRQ_NUMBER);
 8001090:	2032      	movs	r0, #50	; 0x32
 8001092:	f7ff fbd8 	bl	8000846 <InterruptIRQ_Enable>
}
 8001096:	e002      	b.n	800109e <Timer_Toggle_Interrupt+0x46>
            InterruptIRQ_Disable(TIM5_IRQ_NUMBER);
 8001098:	2032      	movs	r0, #50	; 0x32
 800109a:	f7ff fc0f 	bl	80008bc <InterruptIRQ_Disable>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40000c00 	.word	0x40000c00

080010ac <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	uint32_t eventsToRun;

    ApplicationInit();
 80010b2:	f7ff f89b 	bl	80001ec <ApplicationInit>

    addSchedulerEvent(DELAY_EVENT);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff fde4 	bl	8000c84 <addSchedulerEvent>

    eventsToRun = getScheduledEvents();
 80010bc:	f7ff fdd8 	bl	8000c70 <getScheduledEvents>
 80010c0:	6078      	str	r0, [r7, #4]
      #if BUTTON_INTERRUPT_ENABLE == 0
      if ((eventsToRun & AccessPollEvent) != 0)
        ButtonPollingRoutine();
      #endif

      if ((eventsToRun & accessDelayEvent) != 0)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0fa      	beq.n	80010c2 <main+0x16>
    	  Delay(0);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff f8e1 	bl	8000294 <Delay>
      if ((eventsToRun & accessDelayEvent) != 0)
 80010d2:	e7f6      	b.n	80010c2 <main+0x16>

080010d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010d4:	480d      	ldr	r0, [pc, #52]	; (800110c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <LoopForever+0x6>)
  ldr r1, =_edata
 80010de:	490d      	ldr	r1, [pc, #52]	; (8001114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e0:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <LoopForever+0xe>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f4:	4c0a      	ldr	r4, [pc, #40]	; (8001120 <LoopForever+0x16>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001102:	f000 f811 	bl	8001128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001106:	f7ff ffd1 	bl	80010ac <main>

0800110a <LoopForever>:

LoopForever:
  b LoopForever
 800110a:	e7fe      	b.n	800110a <LoopForever>
  ldr   r0, =_estack
 800110c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001118:	0800119c 	.word	0x0800119c
  ldr r2, =_sbss
 800111c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001120:	2000007c 	.word	0x2000007c

08001124 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC_IRQHandler>
	...

08001128 <__libc_init_array>:
 8001128:	b570      	push	{r4, r5, r6, lr}
 800112a:	4d0d      	ldr	r5, [pc, #52]	; (8001160 <__libc_init_array+0x38>)
 800112c:	4c0d      	ldr	r4, [pc, #52]	; (8001164 <__libc_init_array+0x3c>)
 800112e:	1b64      	subs	r4, r4, r5
 8001130:	10a4      	asrs	r4, r4, #2
 8001132:	2600      	movs	r6, #0
 8001134:	42a6      	cmp	r6, r4
 8001136:	d109      	bne.n	800114c <__libc_init_array+0x24>
 8001138:	4d0b      	ldr	r5, [pc, #44]	; (8001168 <__libc_init_array+0x40>)
 800113a:	4c0c      	ldr	r4, [pc, #48]	; (800116c <__libc_init_array+0x44>)
 800113c:	f000 f818 	bl	8001170 <_init>
 8001140:	1b64      	subs	r4, r4, r5
 8001142:	10a4      	asrs	r4, r4, #2
 8001144:	2600      	movs	r6, #0
 8001146:	42a6      	cmp	r6, r4
 8001148:	d105      	bne.n	8001156 <__libc_init_array+0x2e>
 800114a:	bd70      	pop	{r4, r5, r6, pc}
 800114c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001150:	4798      	blx	r3
 8001152:	3601      	adds	r6, #1
 8001154:	e7ee      	b.n	8001134 <__libc_init_array+0xc>
 8001156:	f855 3b04 	ldr.w	r3, [r5], #4
 800115a:	4798      	blx	r3
 800115c:	3601      	adds	r6, #1
 800115e:	e7f2      	b.n	8001146 <__libc_init_array+0x1e>
 8001160:	08001194 	.word	0x08001194
 8001164:	08001194 	.word	0x08001194
 8001168:	08001194 	.word	0x08001194
 800116c:	08001198 	.word	0x08001198

08001170 <_init>:
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001172:	bf00      	nop
 8001174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001176:	bc08      	pop	{r3}
 8001178:	469e      	mov	lr, r3
 800117a:	4770      	bx	lr

0800117c <_fini>:
 800117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117e:	bf00      	nop
 8001180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001182:	bc08      	pop	{r3}
 8001184:	469e      	mov	lr, r3
 8001186:	4770      	bx	lr
